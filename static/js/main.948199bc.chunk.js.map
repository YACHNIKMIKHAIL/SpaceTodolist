{"version":3,"sources":["Components/Images/wallpaperflare.com_wallpaper.jpg","Components/EditableSpan/EditableSpan.tsx","Components/ButtonRender.tsx","Components/Button/Button.tsx","Components/Checkbox/Checkbox.tsx","Components/Map/TasksMap.tsx","Components/Input/Input.tsx","Components/AddForm/AddForm.tsx","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EditableSpan","onChange","props","useState","title","setTitle","editM","setEditM","TextField","id","label","variant","value","autoFocus","e","currentTarget","onBlur","style","color","onDoubleClick","ButtonRender","name","callback","className","IconButton","onClick","ShutterSpeed","aria-label","size","Delete","fontSize","Button","CheckboxX","Checkbox","defaultChecked","isDone","TasksMap","tasks","changeCheckbox","removeTaskX","changeTaskTitle","todolistID","map","m","TaskCase","opacity","key","display","flexDirection","justifyContent","alignItems","changeCheckboxX","styled","div","Input","error","onKeyPress","onChangeHandler","onKeyPressHandler","helperText","AddForm","setError","addTaskButton","trim","addItem","Todolist","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","filter","changeTasksFiler","makeActive","Grid","item","OpacityCase","onChangeTodolistTitle","checked","TodolistsMap","todolists","todo","tasksForRender","f","App","todolist1","v1","todolist2","todolist3","todolist4","todolist5","todolist6","todolist7","todolist8","todolist9","setTasks","setTodolists","AppCase","AppBar","position","Toolbar","edge","sx","mr","Home","Typography","component","flexGrow","Container","fixed","container","padding","backgroundColor","margin","borderRadius","newTodolist","spacing","todolistId","img","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.948199bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaperflare.com_wallpaper.5940d32b.jpg\";","import React, {useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (title: string) => void\n}\nexport const EditableSpan = ({onChange, ...props}: EditableSpanPropsType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editM, setEditM] = useState<boolean>(false)\n    const activateEditM = () => {\n        setEditM(true)\n        setTitle(props.title)\n    }\n    const activateViewM = () => {\n        setEditM(false)\n        onChange(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editM\n        ?<TextField id=\"standard-basic\" label=\"Changes:\" variant=\"standard\" value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}\n        style={{color:'white'}}/>\n        // <input value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}/>\n        : <span onDoubleClick={activateEditM} style={{color:'#EDC085'}}>{title}</span>\n}","import React from 'react';\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete, ShutterSpeed} from \"@mui/icons-material\";\n\n\n\nexport const ButtonRender = (name: string, callback: () => void, className?: string) => {\n    if(name==='+'){\n        return <IconButton  style={{color:'#EDC085'}} onClick={()=>callback()}>\n            <ShutterSpeed/>\n        </IconButton>\n\n    }\n    if(name==='x'){\n        return <IconButton aria-label=\"delete\" size=\"small\" onClick={()=>callback()}>\n            <Delete fontSize=\"small\" />\n        </IconButton>\n    }\n    if(name==='All'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>All</Button>\n    }\n    if(name==='Active'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Active</Button>\n    }\n    if(name==='Complited'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Complited</Button>\n    }\n\n\n};\n\nexport default ButtonRender;","import React from 'react';\nimport ButtonRender from \"../ButtonRender\";\n\ntype ButtonPropsType = {\n    name: string\n    callback: () => void\n    className?: string\n}\nexport const Button = ({name, callback, className}: ButtonPropsType) => {\n    // const onClickHandler = () => callback()\n\n    return (<div>\n        {ButtonRender(name, callback, className)}\n    </div>)\n\n    // <button className={className}\n    //                onClick={(e) => onClickHandler()}>{name}</button>\n}","import React, {ChangeEvent} from \"react\";\nimport {Checkbox} from \"@mui/material\";\n\ntype CheckboxPropsType={\n    isDone:boolean\n    callback: (e:ChangeEvent<HTMLInputElement>)=>void\n}\nexport const CheckboxX = (props:CheckboxPropsType) => {\n    const callback = (e: ChangeEvent<HTMLInputElement>) => {\n      props.callback(e)\n    }\n  return <Checkbox  color=\"secondary\"\n                    defaultChecked={props.isDone}\n                   onChange={(e: ChangeEvent<HTMLInputElement>) => callback(e)}/>\n\n    // <input type=\"checkbox\" checked={props.isDone}\n    //             onChange={(e) => callback(e)}/>\n}","import React, {ChangeEvent} from \"react\";\nimport {TaskType} from \"../Todolist/Todolist\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Button/Button\";\nimport {CheckboxX} from \"../Checkbox/Checkbox\";\nimport styled from \"styled-components\";\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    changeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>, todolistID: string) => void\n    removeTaskX: (id: string) => void\n    id: string\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\n    todolistID: string\n}\nexport const TasksMap = ({tasks, changeCheckbox, removeTaskX, ...props}: TasksMapType) => {\n    const changeTaskTitle = (title: string) => props.changeTaskTitle(props.id, title, props.todolistID)\n    const changeCheckboxX = (id: string, e: ChangeEvent<HTMLInputElement>) => changeCheckbox(id, e, props.todolistID)\n\n    return (\n        <div>{\n            tasks.map(m => {\n                    return <TaskCase opacity={m.isDone ? '0.4' : '1'}\n                                     color={m.isDone ? 'black' : 'white'}\n                                     key={m.id} style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        justifyContent: \"space-between\",\n                        alignItems: 'center',\n                    }}>\n                        <CheckboxX isDone={m.isDone}\n                                   callback={(e) => changeCheckboxX(m.id, e)}/>\n                        <EditableSpan title={m.title} onChange={changeTaskTitle}/>\n                        <Button name={'x'} callback={() => removeTaskX(m.id)}/>\n                    </TaskCase>\n                }\n            )\n        }\n        </div>\n    )\n}\n\nconst TaskCase = styled.div<{ opacity: string, color: string }>`\n  opacity: ${props => props.opacity};\n  color: ${props => props.color};\n`","import React, {ChangeEvent} from 'react';\nimport {TextField} from \"@mui/material\";\n\ntype InputPropsType = {\n    error: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n    onKeyPress: (e: React.KeyboardEvent<HTMLDivElement>) => void\n}\n\nexport const Input = ({error, value, onChange, onKeyPress}: InputPropsType) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onChange(e)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => onKeyPress(e)\n\n    return <TextField id=\"outlined-basic\"\n                      label=\"New task\"\n                      variant=\"outlined\"\n                      value={value}\n                      onChange={(e) => onChangeHandler(e)}\n                      onKeyPress={(e) => onKeyPressHandler(e)}\n                      helperText={error}\n                      style={{color: 'whitesmoke'}}/>\n\n    // <input className={className}\n    //               value={value}\n    //               onChange={(e) => onChangeHandler(e)}\n    //               onKeyPress={(e) => onKeyPressHandler(e)}/>\n}","import {Input} from \"../Input/Input\";\nimport {Button} from \"../Button/Button\";\nimport React, {ChangeEvent, useState} from \"react\";\n\ntype AddFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddForm = (props: AddFormPropsType) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    }\n    const addTaskButton = () => {\n        if (title.trim() !== '') {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is undefined !')\n        }\n    }\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLDivElement>) => (e.key === 'Enter') ? addTaskButton() : ''\n    return <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n        <Input value={title}\n               onChange={onChangeInput}\n               onKeyPress={onKeyPressAdd}\n               error={error}/>\n        <Button name={'+'} callback={addTaskButton}/>\n        {/*{error ? <div className={'error-message'}>{error}</div> : ''}*/}\n    </div>\n}","import React, {ChangeEvent} from 'react';\r\nimport {TasksMap} from \"../Map/TasksMap\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {AddForm} from \"../AddForm/AddForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValueType = 'all' | 'active' | 'complited'\r\nexport type TodolitsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValueType\r\n    todolistID: string\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    onChangeTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             removeTodolist,\r\n                             todolistID,\r\n                             filter,\r\n                             ...props\r\n                         }: PropsType) {\r\n\r\n    const changeTasksFiler = (value: FilterValueType, todolistID: string) => changeFilter(value, todolistID)\r\n    const removeTaskX = (id: string) => removeTask(id, todolistID)\r\n    const changeCheckbox = (id: string, e: ChangeEvent<HTMLInputElement>, todolistID: string) => changeTaskStatus(id, e.currentTarget.checked, todolistID)\r\n    const removeTodolistX = () => removeTodolist(todolistID)\r\n    const makeActive = (value: string) => filter === value ? 'active-filter' : ''\r\n    const addTaskX = (title: string) => addTask(title, todolistID)\r\n    const onChangeTodolistTitle = (title: string) => props.onChangeTodolistTitle(todolistID, title)\r\n\r\n    return <Grid item>\r\n        {/*<Paper style={{padding: '10px'}}>*/}\r\n            <OpacityCase >\r\n                <h3 style={{display: 'flex', flexDirection: 'row',justifyContent:'space-between'}}>\r\n                    <EditableSpan title={props.title} onChange={onChangeTodolistTitle} />\r\n                    <Button name={'x'} callback={removeTodolistX}/>\r\n                </h3>\r\n\r\n                <AddForm addItem={addTaskX}/>\r\n\r\n                <TasksMap tasks={props.tasks}\r\n                          changeCheckbox={changeCheckbox}\r\n                          removeTaskX={removeTaskX}\r\n                          id={todolistID}\r\n                          changeTaskTitle={props.changeTaskTitle}\r\n                          todolistID={todolistID}/>\r\n\r\n                <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                    <Button name={'All'} callback={() => changeTasksFiler('all', todolistID)}\r\n                            className={makeActive('all')}/>\r\n                    <Button name={'Active'} callback={() => changeTasksFiler('active', todolistID)}\r\n                            className={makeActive('active')}/>\r\n                    <Button name={'Complited'} callback={() => changeTasksFiler('complited', todolistID)}\r\n                            className={makeActive('complited')}/>\r\n                </div>\r\n            </OpacityCase>\r\n        {/*</Paper>*/}\r\n    </Grid>\r\n}\r\n\r\nconst OpacityCase = styled.div`\r\n  background: rgba(97, 133, 165, 0.6);\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n`","import {FilterValueType, TaskStateType, Todolist, TodolitsType} from \"../Todolist/Todolist\";\nimport React from \"react\";\n\n\ntype TodolistsMapType = {\n    todolists: Array<TodolitsType>\n    tasks: TaskStateType\n    removeTask: (id: string, todolistID: string) => void\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\n    removeTodolist: (todolistID: string) => void\n    changeTaskTitle:(id:string, title:string,todolistId:string)=>void\n    onChangeTodolistTitle:(title:string,todolistId:string)=>void\n}\nexport const TodolistsMap = ({\n                                 todolists,\n                                 tasks,\n                                 removeTask,\n                                 changeFilter,\n                                 addTask,\n                                 changeTaskStatus,\n                                 removeTodolist,\n                                 ...props\n                             }: TodolistsMapType) => {\n    return <> {todolists.map(todo => {\n                let tasksForRender = tasks[todo.id]\n                if (todo.filter === 'active') {\n                    tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n                }\n                if (todo.filter === 'complited') {\n                    tasksForRender = tasks[todo.id].filter(f => f.isDone)\n                }\n                return <Todolist key={todo.id}\n                                 todolistID={todo.id}\n                                 title={todo.title}\n                                 tasks={tasksForRender}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeTaskStatus={changeTaskStatus}\n                                 filter={todo.filter}\n                                 removeTodolist={removeTodolist}\n                                 changeTaskTitle={props.changeTaskTitle}\n                                 onChangeTodolistTitle={props.onChangeTodolistTitle}/>\n            })}\n        </>\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType, TaskStateType, TodolitsType} from './Components/Todolist/Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\r\nimport {AddForm} from \"./Components/AddForm/AddForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport {Home} from '@mui/icons-material';\r\nimport styled from \"styled-components\";\r\nimport img from './Components/Images/wallpaperflare.com_wallpaper.jpg'\r\n\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n    const todolist3 = v1()\r\n    const todolist4 = v1()\r\n    const todolist5 = v1()\r\n    const todolist6 = v1()\r\n    const todolist7 = v1()\r\n    const todolist8 = v1()\r\n    const todolist9 = v1()\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false}],\r\n            [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\r\n                {id: v1(), title: \"Milk\", isDone: false},\r\n                {id: v1(), title: \"Bread\", isDone: false}],\r\n            [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\r\n                {id: v1(), title: \"Wheels\", isDone: false},\r\n                {id: v1(), title: \"Crank\", isDone: false}],\r\n            [todolist4]: [{id: v1(), title: \"Тудулист\", isDone: true},\r\n                {id: v1(), title: \"Нативочка\", isDone: false},\r\n                {id: v1(), title: \"Чилл)))\", isDone: false}],\r\n            [todolist5]: [{id: v1(), title: \"Домой вернуться\", isDone: true},\r\n                {id: v1(), title: \"Игровая комната\", isDone: true},\r\n                {id: v1(), title: \"В гости к маме)\", isDone: false}],\r\n            [todolist6]: [{id: v1(), title: \"Чай\", isDone: true},\r\n                {id: v1(), title: \"Чай\", isDone: true},\r\n                {id: v1(), title: \"Чай\", isDone: false}],\r\n            [todolist7]: [{id: v1(), title: \"по обс-вам(\", isDone: false},\r\n                {id: v1(), title: \"Выжить любой ценой\", isDone: false},\r\n                {id: v1(), title: \"Попытаться кайфануть)\", isDone: true}],\r\n            [todolist8]: [{id: v1(), title: \"Мульты\", isDone: true},\r\n                {id: v1(), title: \"Сны\", isDone: true},\r\n                {id: v1(), title: \"Ничё\", isDone: false}],\r\n            [todolist9]: [{id: v1(), title: \"Цветы\", isDone: false},\r\n                {id: v1(), title: \"Цветы\", isDone: false},\r\n                {id: v1(), title: \"Цветы)\", isDone: true}]\r\n        }\r\n    )\r\n    const [todolists, setTodolists] = useState<Array<TodolitsType>>([\r\n        {id: todolist1, title: 'What to learn?', filter: 'all'},\r\n        {id: todolist2, title: 'What to buy?', filter: 'all'},\r\n        {id: todolist3, title: 'What to fixie?', filter: 'all'},\r\n        {id: todolist4, title: 'C чего начать?', filter: 'all'},\r\n        {id: todolist5, title: 'Куда сходить?', filter: 'all'},\r\n        {id: todolist6, title: 'Что пить?', filter: 'all'},\r\n        {id: todolist7, title: 'Как жить теперь?', filter: 'all'},\r\n        {id: todolist8, title: 'Что позырить?', filter: 'all'},\r\n        {id: todolist9, title: 'Что подарить?', filter: 'all'}\r\n    ])\r\n\r\n    const removeTask = (id: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: tasks[todolistID].filter(f => f.id !== id)\r\n    })\r\n    const changeFilter = (filter: FilterValueType, todolistID: string) => setTodolists(todolists.map(m => m.id === todolistID ? {\r\n        ...m,\r\n        filter: filter\r\n    } : m))\r\n\r\n    const addTask = (title: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]\r\n    })\r\n\r\n    const changeTaskStatus = (id: string, isDone: boolean, todolistID: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistID]: tasks[todolistID].map(m => m.id === id ? {...m, isDone} : m)\r\n        })\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(f => f.id !== todolistID))\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        let newID = v1()\r\n        let newTodolist: TodolitsType = {id: newID, title: title, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolist.id]: []})\r\n    }\r\n    const changeTaskTitle = (id: string, title: string, todolistId: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, title: title} : m)})\r\n    }\r\n    const onChangeTodolistTitle = (title: string, todolistID: string) => {\r\n        setTodolists(todolists.map(m => m.id === todolistID ? {...m, title} : m))\r\n    }\r\n\r\n    return <AppCase>\r\n        <AppBar position=\"static\" style={{opacity:'0.7'}}>\r\n            <Toolbar>\r\n                <IconButton\r\n                    size=\"large\"\r\n                    edge=\"start\"\r\n                    color=\"inherit\"\r\n                    aria-label=\"menu\"\r\n                    sx={{mr: 2}}\r\n                >\r\n                    <Home fontSize=\"large\"/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                    Space Todolist\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar >\r\n        <Container fixed>\r\n            <Grid container style={{\r\n                padding: '10px',\r\n                backgroundColor: 'rgba(97, 133, 165, 0.7)',\r\n                margin: '10px',\r\n                borderRadius: '10px',\r\n                display:'flex',\r\n                justifyContent:'flex-end'\r\n            }}>\r\n                <AddForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <TodolistsMap todolists={todolists}\r\n                              tasks={tasks}\r\n                              removeTask={removeTask}\r\n                              changeFilter={changeFilter}\r\n                              addTask={addTask}\r\n                              changeTaskStatus={changeTaskStatus}\r\n                              removeTodolist={removeTodolist}\r\n                              changeTaskTitle={changeTaskTitle}\r\n                              onChangeTodolistTitle={onChangeTodolistTitle}/>\r\n            </Grid>\r\n        </Container>\r\n    </AppCase>\r\n}\r\n\r\nexport default App;\r\n\r\nconst AppCase = styled.div`\r\n  background: url(${img}) no-repeat center/cover;\r\n  height: 100vh;\r\n  overflow: auto;\r\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}