{"version":3,"sources":["Components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","todolistID","props","useState","title","setTitle","error","setError","addTaskButton","trim","changeTasksFiler","value","onClick","className","onChange","e","currentTarget","onKeyPress","key","tasks","map","m","id","isDone","type","checked","changeCheckbox","filter","App","todolist1","v1","todolist2","todolist3","setTasks","todolists","setTodolists","todolistTasks","f","todolist","find","task","todo","tasksForRender","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e226f199.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValueType = 'all' | 'active' | 'complited'\r\nexport type TodolitsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValueType\r\n    todolistID: string\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             removeTodolist,\r\n                             todolistID,\r\n                             ...props\r\n                         }: PropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const addTaskButton = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(title.trim(), todolistID)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is undefined !')\r\n        }\r\n    }\r\n    const changeTasksFiler = (value: FilterValueType, todolistID: string) => changeFilter(value, todolistID)\r\n    const removeTaskX = (id: string) => removeTask(id, todolistID)\r\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLInputElement>) => (e.key === 'Enter') ? addTaskButton() : ''\r\n    const changeCheckbox = (id: string, e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(id, e.currentTarget.checked, todolistID)\r\n    const removeTodolistX = () => removeTodolist(todolistID)\r\n\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={removeTodolistX}>x</button>\r\n        </h3>\r\n        <div>\r\n            <input className={error ? 'error' : ''}\r\n                   value={title}\r\n                   onChange={onChangeInput}\r\n                   onKeyPress={onKeyPressAdd}/>\r\n            <button onClick={addTaskButton}>+</button>\r\n        </div>\r\n        {error ? <div className={'error-message'}>{error}</div> : ''}\r\n        <ul>\r\n            {props.tasks.map(m => <li key={m.id} className={m.isDone ? 'is-done' : ''}>\r\n                <input type=\"checkbox\" checked={m.isDone}\r\n                       onChange={(e) => changeCheckbox(m.id, e)}/>\r\n                <span>{m.title}</span>\r\n                <button onClick={(e) => removeTaskX(m.id)}>x</button>\r\n            </li>)}\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('all', todolistID)}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('active', todolistID)}>Active\r\n            </button>\r\n            <button className={props.filter === 'complited' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('complited', todolistID)}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType, TaskStateType, Todolist, TodolitsType} from './Components/Todolist/Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n    const todolist3 = v1()\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false}],\r\n            [todolist2]: [{id: v1(), title: \"Hello world\", isDone: false},\r\n                {id: v1(), title: \"I am Happy\", isDone: false},\r\n                {id: v1(), title: \"Yo\", isDone: false}],\r\n            [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\r\n                {id: v1(), title: \"Wheels\", isDone: false},\r\n                {id: v1(), title: \"Crank\", isDone: false}]\r\n        }\r\n    )\r\n    const [todolists, setTodolists] = useState<Array<TodolitsType>>([\r\n        {id: todolist1, title: 'What to learn?', filter: 'all'},\r\n        {id: todolist2, title: 'What to buy?', filter: 'all'},\r\n        {id: todolist3, title: 'What to fixie?', filter: 'all'}\r\n    ])\r\n\r\n    const removeTask = (id: string, todolistID: string) => {\r\n        let todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = todolistTasks.filter(f => f.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeFilter = (filter: FilterValueType, todolistID: string) => {\r\n        let todolist = todolists.find(f => f.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = filter\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    const addTask = (title: string, todolistID: string) => {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let todolistTasks = tasks[todolistID]\r\n        tasks[todolistID] = [task, ...todolistTasks]\r\n        setTasks({...tasks})\r\n\r\n    }\r\n    const changeTaskStatus = (id: string, isDone: boolean, todolistID: string) => {\r\n        let task = tasks[todolistID].find(f => f.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(f => f.id !== todolistID))\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(todo => {\r\n                let tasksForRender = tasks[todo.id]\r\n                if (todo.filter === 'active') {\r\n                    tasksForRender = tasks[todo.id].filter(f => !f.isDone)\r\n                }\r\n                if (todo.filter === 'complited') {\r\n                    tasksForRender = tasks[todo.id].filter(f => f.isDone)\r\n                }\r\n                return <Todolist key={todo.id}\r\n                                 todolistID={todo.id}\r\n                                 title={todo.title}\r\n                                 tasks={tasksForRender}\r\n                                 removeTask={removeTask}\r\n                                 changeFilter={changeFilter}\r\n                                 addTask={addTask}\r\n                                 changeTaskStatus={changeTaskStatus}\r\n                                 filter={todo.filter}\r\n                                 removeTodolist={removeTodolist}/>\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}