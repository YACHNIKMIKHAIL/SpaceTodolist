{"version":3,"sources":["Components/Images/wallpaperflare.com_wallpaper.jpg","Components/EditableSpan/EditableSpan.tsx","Components/ButtonRender.tsx","Components/Button/Button.tsx","Components/Checkbox/Checkbox.tsx","Components/Map/TasksMap.tsx","Components/Input/Input.tsx","Components/AddForm/AddForm.tsx","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","Components/State/TasksReducer.ts","Components/State/TodolistReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EditableSpan","React","memo","onChange","props","useState","title","setTitle","editM","setEditM","TextField","id","label","variant","value","autoFocus","e","currentTarget","onBlur","style","color","onDoubleClick","ButtonRender","name","callback","className","IconButton","onClick","ShutterSpeed","aria-label","size","Delete","fontSize","Button","CheckboxX","Checkbox","defaultChecked","isDone","TasksMap","tasks","changeCheckbox","removeTaskX","changeTaskTitle","todolistID","map","m","TaskCase","opacity","key","display","flexDirection","justifyContent","alignItems","changeCheckboxX","styled","div","Input","error","onKeyPress","onChangeHandler","onKeyPressHandler","helperText","AddForm","setError","addTaskButton","trim","addItem","Todolist","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","filter","changeTasksFiler","makeActive","Grid","item","OpacityCase","onChangeTodolistTitle","checked","TodolistsMap","todolists","todo","tasksForRender","f","tasksReducer","state","action","type","todolistId","taskId","v1","newTodolistId","todolistReducer","newTitle","App","todolist1","todolist2","todolist3","todolist4","todolist5","todolist6","todolist7","todolist8","todolist9","useReducer","dispatchTasks","dispatchTodolists","AppCase","AppBar","position","Toolbar","edge","sx","mr","Home","Typography","component","flexGrow","Container","fixed","container","padding","backgroundColor","margin","borderRadius","AddTodoAC","addNewTodoAC","spacing","ChangeTodoFilterAC","AddTaskAC","ChangeTaskStatusAC","changeTaskTitleAC","img","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5cf97ec8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallpaperflare.com_wallpaper.5940d32b.jpg\";","import React, {useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (title: string) => void\n}\nexport const EditableSpanMemo = ({onChange, ...props}: EditableSpanPropsType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editM, setEditM] = useState<boolean>(false)\n    const activateEditM = () => {\n        setEditM(true)\n        setTitle(props.title)\n    }\n    const activateViewM = () => {\n        setEditM(false)\n        onChange(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editM\n        ?<TextField id=\"standard-basic\" label=\"Changes:\" variant=\"standard\" value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}\n        style={{color:'white'}}/>\n        // <input value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}/>\n        : <span onDoubleClick={activateEditM}\n                // style={{color:'rgba(28,16,0,0.8)'}}\n        >{title}</span>\n}\nexport const EditableSpan=React.memo(EditableSpanMemo)","import React from 'react';\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete, ShutterSpeed} from \"@mui/icons-material\";\n\n\n\nexport const ButtonRender = (name: string, callback: () => void, className?: string) => {\n    if(name==='+'){\n        return <IconButton  style={{color:'#ffe1b2'}} onClick={()=>callback()}>\n            <ShutterSpeed/>\n        </IconButton>\n\n    }\n    if(name==='x'){\n        return <IconButton aria-label=\"delete\" size=\"small\" onClick={()=>callback()}>\n            <Delete fontSize=\"small\" />\n        </IconButton>\n    }\n    if(name==='All'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>All</Button>\n    }\n    if(name==='Active'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Active</Button>\n    }\n    if(name==='Complited'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Complited</Button>\n    }\n\n\n};\n\nexport default ButtonRender;","import React from 'react';\nimport ButtonRender from \"../ButtonRender\";\n\ntype ButtonPropsType = {\n    name: string\n    callback: () => void\n    className?: string\n}\nexport const Button = ({name, callback, className}: ButtonPropsType) => {\n    // const onClickHandler = () => callback()\n\n    return (<div>\n        {ButtonRender(name, callback, className)}\n    </div>)\n\n    // <button className={className}\n    //                onClick={(e) => onClickHandler()}>{name}</button>\n}","import React, {ChangeEvent} from \"react\";\nimport {Checkbox} from \"@mui/material\";\n\ntype CheckboxPropsType={\n    isDone:boolean\n    callback: (e:ChangeEvent<HTMLInputElement>)=>void\n}\nexport const CheckboxX = (props:CheckboxPropsType) => {\n    const callback = (e: ChangeEvent<HTMLInputElement>) => {\n      props.callback(e)\n    }\n  return <Checkbox  color=\"secondary\"\n                    defaultChecked={props.isDone}\n                   onChange={(e: ChangeEvent<HTMLInputElement>) => callback(e)}/>\n\n    // <input type=\"checkbox\" checked={props.isDone}\n    //             onChange={(e) => callback(e)}/>\n}","import React, {ChangeEvent} from \"react\";\nimport {TaskType, TodolistMemo} from \"../Todolist/Todolist\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Button/Button\";\nimport {CheckboxX} from \"../Checkbox/Checkbox\";\nimport styled from \"styled-components\";\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    changeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>, todolistID: string) => void\n    removeTaskX: (id: string) => void\n    id: string\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\n    todolistID: string\n}\nexport const TasksMapMemo = ({tasks, changeCheckbox, removeTaskX, ...props}: TasksMapType) => {\n    const changeTaskTitle = (title: string) => props.changeTaskTitle(props.id, title, props.todolistID)\n    const changeCheckboxX = (id: string, e: ChangeEvent<HTMLInputElement>) => changeCheckbox(id, e, props.todolistID)\n\n    return (\n        <div>{\n            tasks.map(m => {\n                    return <TaskCase opacity={m.isDone ? '0.4' : '1'}\n                                     color={m.isDone ? 'rgba(109,4,234,0.77)' : 'rgba(28,16,0,0.8)'}\n                                     key={m.id} style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        justifyContent: \"space-between\",\n                        alignItems: 'center',\n                    }}>\n                        <CheckboxX isDone={m.isDone}\n                                   callback={(e) => changeCheckboxX(m.id, e)}/>\n                        <EditableSpan title={m.title} onChange={changeTaskTitle}/>\n                        <Button name={'x'} callback={() => removeTaskX(m.id)}/>\n                    </TaskCase>\n                }\n            )\n        }\n        </div>\n    )\n}\nexport const TasksMap=React.memo(TasksMapMemo)\nconst TaskCase = styled.div<{ opacity: string, color: string }>`\n  opacity: ${props => props.opacity};\n  color: ${props => props.color};\n`","import React, {ChangeEvent} from 'react';\nimport {TextField} from \"@mui/material\";\n\ntype InputPropsType = {\n    error: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n    onKeyPress: (e: React.KeyboardEvent<HTMLDivElement>) => void\n}\n\nexport const Input = ({error, value, onChange, onKeyPress}: InputPropsType) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onChange(e)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => onKeyPress(e)\n\n    return <TextField id=\"outlined-basic\"\n                      label=\"New challenge\"\n                      variant=\"outlined\"\n                      value={value}\n                      onChange={(e) => onChangeHandler(e)}\n                      onKeyPress={(e) => onKeyPressHandler(e)}\n                      helperText={error}\n                      style={{color: 'whitesmoke'}}/>\n\n    // <input className={className}\n    //               value={value}\n    //               onChange={(e) => onChangeHandler(e)}\n    //               onKeyPress={(e) => onKeyPressHandler(e)}/>\n}","import {Input} from \"../Input/Input\";\nimport {Button} from \"../Button/Button\";\nimport React, {ChangeEvent, useState} from \"react\";\n\ntype AddFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddForm = (props: AddFormPropsType) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    }\n    const addTaskButton = () => {\n        if (title.trim() !== '') {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is undefined !')\n        }\n    }\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLDivElement>) => (e.key === 'Enter') ? addTaskButton() : ''\n    return <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n        <Input value={title}\n               onChange={onChangeInput}\n               onKeyPress={onKeyPressAdd}\n               error={error}/>\n        <Button name={'+'} callback={addTaskButton}/>\n        {/*{error ? <div className={'error-message'}>{error}</div> : ''}*/}\n    </div>\n}","import React, {ChangeEvent} from 'react';\nimport {TasksMap} from \"../Map/TasksMap\";\nimport {Button} from \"../Button/Button\";\nimport {AddForm} from \"../AddForm/AddForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Grid, Paper} from \"@mui/material\";\nimport styled from \"styled-components\";\n\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type FilterValueType = 'all' | 'active' | 'complited'\nexport type TodolitsType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (id: string, todolistID: string) => void\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\n    filter: FilterValueType\n    todolistID: string\n    removeTodolist: (todolistID: string) => void\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\n    onChangeTodolistTitle: (title: string, todolistId: string) => void\n}\n\nexport function TodolistMemo({\n                             removeTask,\n                             changeFilter,\n                             addTask,\n                             changeTaskStatus,\n                             removeTodolist,\n                             todolistID,\n                             filter,\n                             ...props\n                         }: PropsType) {\n\n    const changeTasksFiler = (value: FilterValueType, todolistID: string) => changeFilter(value, todolistID)\n    const removeTaskX = (id: string) => removeTask(id, todolistID)\n    const changeCheckbox = (id: string, e: ChangeEvent<HTMLInputElement>, todolistID: string) => changeTaskStatus(id, e.currentTarget.checked, todolistID)\n    const removeTodolistX = () => removeTodolist(todolistID)\n    const makeActive = (value: string) => filter === value ? 'active-filter' : ''\n    const addTaskX = (title: string) => addTask(title, todolistID)\n    const onChangeTodolistTitle = (title: string) => props.onChangeTodolistTitle(todolistID, title)\n\n    return <Grid item>\n        {/*<Paper style={{padding: '10px'}}>*/}\n            <OpacityCase >\n                <h3 style={{display: 'flex', flexDirection: 'row',justifyContent:'space-between'}}>\n                    <EditableSpan title={props.title} onChange={onChangeTodolistTitle} />\n                    <Button name={'x'} callback={removeTodolistX}/>\n                </h3>\n\n                <AddForm addItem={addTaskX}/>\n\n                <TasksMap tasks={props.tasks}\n                          changeCheckbox={changeCheckbox}\n                          removeTaskX={removeTaskX}\n                          id={todolistID}\n                          changeTaskTitle={props.changeTaskTitle}\n                          todolistID={todolistID}/>\n\n                <div style={{display: 'flex', flexDirection: 'row'}}>\n                    <Button name={'All'} callback={() => changeTasksFiler('all', todolistID)}\n                            className={makeActive('all')}/>\n                    <Button name={'Active'} callback={() => changeTasksFiler('active', todolistID)}\n                            className={makeActive('active')}/>\n                    <Button name={'Complited'} callback={() => changeTasksFiler('complited', todolistID)}\n                            className={makeActive('complited')}/>\n                </div>\n            </OpacityCase>\n        {/*</Paper>*/}\n    </Grid>\n}\nexport const Todolist=React.memo(TodolistMemo)\n\nconst OpacityCase = styled.div`\n  background: rgba(203, 209, 213,0.7);\n  padding: 15px;\n  border-radius: 10px;\n`","import {FilterValueType, TaskStateType, Todolist, TodolitsType} from \"../Todolist/Todolist\";\nimport React from \"react\";\n\n\ntype TodolistsMapType = {\n    todolists: Array<TodolitsType>\n    tasks: TaskStateType\n    removeTask: (id: string, todolistID: string) => void\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\n    removeTodolist: (todolistID: string) => void\n    changeTaskTitle:(id:string, title:string,todolistId:string)=>void\n    onChangeTodolistTitle:(title:string,todolistId:string)=>void\n}\nexport const TodolistsMapMemo = ({\n                                 todolists,\n                                 tasks,\n                                 removeTask,\n                                 changeFilter,\n                                 addTask,\n                                 changeTaskStatus,\n                                 removeTodolist,\n                                 ...props\n                             }: TodolistsMapType) => {\n    return <> {todolists.map(todo => {\n                let tasksForRender = tasks[todo.id]\n                if (todo.filter === 'active') {\n                    tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n                }\n                if (todo.filter === 'complited') {\n                    tasksForRender = tasks[todo.id].filter(f => f.isDone)\n                }\n                return <Todolist key={todo.id}\n                                 todolistID={todo.id}\n                                 title={todo.title}\n                                 tasks={tasksForRender}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeTaskStatus={changeTaskStatus}\n                                 filter={todo.filter}\n                                 removeTodolist={removeTodolist}\n                                 changeTaskTitle={props.changeTaskTitle}\n                                 onChangeTodolistTitle={props.onChangeTodolistTitle}/>\n            })}\n        </>\n}\nexport const TodolistsMap=React.memo(TodolistsMapMemo)","import {FilterValueType, TaskStateType, TaskType} from \"../Todolist/Todolist\";\nimport {v1} from \"uuid\";\n\nexport const tasksReducer = (state:TaskStateType,action:ActionsType):TaskStateType => {\n  switch (action.type){\n      case 'REMOVE_TASK':{\n         return {...state,[action.todolistId]:state[action.todolistId].filter(f=>f.id!==action.taskId)}\n      }\n      case 'CHANGE_TASK_STATUS':{\n          return {...state,[action.todolistId]:state[action.todolistId].map(m=>m.id===action.taskId?{...m,isDone:action.isDone}:m)}\n      }\n      case 'ADD_TASK':{\n          return {...state,[action.todolistId]:[{id: v1(), title: action.title, isDone: false},...state[action.todolistId]]}\n      }\n      case 'CHANGE_TASK_TITLE':{\n          return {...state,[action.todolistId]:state[action.todolistId].map(m=>m.id===action.taskId?{...m,title:action.title}:m)}\n      }\n      case 'ADD_NEW_TODO':{\n          return {...state,[action.newTodolistId]:[]}\n      }\n\n      default:\n          return state\n  }\n}\n\ntype ActionsType=RemoveTaskActionType|changeTaskStatusAC|AddTaskActionType|changeTaskTitleType|addNewTodoType\n\ntype RemoveTaskActionType=ReturnType<typeof RemoveTaskAC>\nexport const RemoveTaskAC = (taskId:string,todolistId:string) => {\n    return {type: 'REMOVE_TASK',taskId:taskId,todolistId:todolistId}as const\n}\n\ntype changeTaskStatusAC =ReturnType<typeof ChangeTaskStatusAC>\nexport const ChangeTaskStatusAC = (taskId:string, isDone:boolean , todolistId:string) => {\n    return {type: 'CHANGE_TASK_STATUS',taskId:taskId,isDone:isDone,todolistId:todolistId}as const\n}\n\ntype AddTaskActionType=ReturnType<typeof AddTaskAC>\nexport const AddTaskAC = (title:string,todolistId:string) => {\n  return {type:'ADD_TASK',title:title,todolistId:todolistId}as const\n}\n\ntype changeTaskTitleType=ReturnType<typeof changeTaskTitleAC>\nexport const changeTaskTitleAC = (taskId:string,title:string,todolistId:string) => {\n  return {type:'CHANGE_TASK_TITLE',title:title,taskId:taskId,todolistId:todolistId}as const\n}\n\ntype addNewTodoType=ReturnType<typeof addNewTodoAC>\nexport const addNewTodoAC=(newTodolistId:string)=>{\n    return {type:'ADD_NEW_TODO',newTodolistId:newTodolistId}as const\n}","import {FilterValueType, TodolitsType} from \"../Todolist/Todolist\";\nimport {v1} from \"uuid\";\n\ntype ActionsType = RemoveTodoActionType | AddTodoActionType | ChangeTodoTitleActionType | ChangeTodoFilterActionType\n\ntype RemoveTodoActionType = {\n    type: 'REMOVE_TODO'\n    id: string\n}\ntype AddTodoActionType = {\n    type: 'ADD_TODO'\n    title: string\n    newTodolistId:string\n}\ntype ChangeTodoTitleActionType = {\n    type: 'CHANGE_TODO_TITLE'\n    id: string\n    newTitle: string\n}\ntype ChangeTodoFilterActionType = {\n    type: 'CHANGE_TODO_FILTER'\n    id: string\n    filter: FilterValueType\n}\nexport const todolistReducer = (state: Array<TodolitsType>, action: ActionsType): Array<TodolitsType> => {\n        switch (action.type) {\n            case 'REMOVE_TODO': {\n                return state.filter(f => f.id !== action.id)\n            }\n            case 'ADD_TODO': {\n                return [...state, {\n                    id: action.newTodolistId,\n                    title: action.title,\n                    filter: 'all'\n                }]\n            }\n            case 'CHANGE_TODO_TITLE': {\n                return state.map(m => m.id === action.id ? {...m, title: action.newTitle} : m)\n            }\n            case 'CHANGE_TODO_FILTER': {\n                debugger\n                return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\n            }\n            default:\n                return state\n        }\n    }\n;\nexport const removeTodolistAC = (todolistId: string): RemoveTodoActionType => {\n    return {type: 'REMOVE_TODO', id: todolistId} as const\n}\nexport const AddTodoAC = (newTitle: string, newTodolistId: string): AddTodoActionType => {\n    return {type: 'ADD_TODO', title: newTitle, newTodolistId: newTodolistId} as const\n}\nexport const ChangeTodoTitleAC = (newTitle: string, todolistId: string): ChangeTodoTitleActionType => {\n    return {type: 'CHANGE_TODO_TITLE', id: todolistId, newTitle: newTitle} as const\n}\nexport const ChangeTodoFilterAC = ( filter: FilterValueType,todolistId: string,): ChangeTodoFilterActionType => {\n    debugger\n    return {type: 'CHANGE_TODO_FILTER' ,id: todolistId, filter: filter} as const\n}","import React, {useReducer, useState} from 'react';\nimport './App.css';\nimport {FilterValueType, TaskStateType, TodolitsType} from './Components/Todolist/Todolist';\nimport {v1} from \"uuid\";\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\nimport {AddForm} from \"./Components/AddForm/AddForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {Home} from '@mui/icons-material';\nimport styled from \"styled-components\";\nimport img from './Components/Images/wallpaperflare.com_wallpaper.jpg'\nimport {\n    addNewTodoAC,\n    AddTaskAC,\n    ChangeTaskStatusAC,\n    changeTaskTitleAC,\n    RemoveTaskAC,\n    tasksReducer\n} from \"./Components/State/TasksReducer\";\nimport {\n    AddTodoAC,\n    ChangeTodoFilterAC,\n    ChangeTodoTitleAC,\n    removeTodolistAC,\n    todolistReducer\n} from \"./Components/State/TodolistReducer\";\n\n\nfunction App() {\n    const todolist1 = v1()\n    const todolist2 = v1()\n    const todolist3 = v1()\n    const todolist4 = v1()\n    const todolist5 = v1()\n    const todolist6 = v1()\n    const todolist7 = v1()\n    const todolist8 = v1()\n    const todolist9 = v1()\n\n    const [tasks, dispatchTasks] = useReducer(tasksReducer,{\n            [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\n                {id: v1(), title: \"JS\", isDone: true},\n                {id: v1(), title: \"ReactJS\", isDone: false}],\n            [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\n                {id: v1(), title: \"Milk\", isDone: false},\n                {id: v1(), title: \"Bread\", isDone: false}],\n            [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\n                {id: v1(), title: \"Wheels\", isDone: false},\n                {id: v1(), title: \"Crank\", isDone: false}],\n            [todolist4]: [{id: v1(), title: \"Тудулист\", isDone: true},\n                {id: v1(), title: \"Нативочка\", isDone: false},\n                {id: v1(), title: \"Чилл)))\", isDone: false}],\n            [todolist5]: [{id: v1(), title: \"Домой вернуться\", isDone: true},\n                {id: v1(), title: \"Игровая комната\", isDone: true},\n                {id: v1(), title: \"В гости к маме)\", isDone: false}],\n            [todolist6]: [{id: v1(), title: \"Чай\", isDone: true},\n                {id: v1(), title: \"Чай\", isDone: true},\n                {id: v1(), title: \"Чай\", isDone: false}],\n            [todolist7]: [{id: v1(), title: \"по обс-вам(\", isDone: false},\n                {id: v1(), title: \"Выжить любой ценой\", isDone: false},\n                {id: v1(), title: \"Попытаться кайфануть)\", isDone: true}],\n            [todolist8]: [{id: v1(), title: \"Мульты\", isDone: true},\n                {id: v1(), title: \"Сны\", isDone: true},\n                {id: v1(), title: \"Ничё\", isDone: false}],\n            [todolist9]: [{id: v1(), title: \"Цветы\", isDone: false},\n                {id: v1(), title: \"Цветы\", isDone: false},\n                {id: v1(), title: \"Цветы)\", isDone: true}]\n        }\n    )\n    const [todolists, dispatchTodolists] = useReducer(todolistReducer,[\n        {id: todolist1, title: 'What to learn?', filter: 'all'},\n        {id: todolist2, title: 'What to buy?', filter: 'all'},\n        {id: todolist3, title: 'What to fixie?', filter: 'all'},\n        {id: todolist4, title: 'C чего начать?', filter: 'all'},\n        {id: todolist5, title: 'Куда сходить?', filter: 'all'},\n        {id: todolist6, title: 'Что пить?', filter: 'all'},\n        {id: todolist7, title: 'Как жить теперь?', filter: 'all'},\n        {id: todolist8, title: 'Что позырить?', filter: 'all'},\n        {id: todolist9, title: 'Что подарить?', filter: 'all'}\n    ])\n\n    const removeTask = (id: string, todolistID: string) => dispatchTasks(RemoveTaskAC(id,todolistID))\n    //     setTasks({\n    //     ...tasks,\n    //     [todolistID]: tasks[todolistID].filter(f => f.id !== id)\n    // })\n    const changeFilter = (filter: FilterValueType, todolistID: string) => {\n        debugger\n        dispatchTodolists(ChangeTodoFilterAC(filter,todolistID))\n    }\n    //     setTodolists(todolists.map(m => m.id === todolistID ? {\n    //     ...m,\n    //     filter: filter\n    // } : m))\n\n    const addTask = (title: string, todolistID: string) =>dispatchTasks(AddTaskAC(title,todolistID))\n    //     setTasks({\n    //     ...tasks,\n    //     [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]\n    // })\n\n    const changeTaskStatus = (id: string, isDone: boolean, todolistID: string) => dispatchTasks(ChangeTaskStatusAC(id, isDone, todolistID))\n    // {\n    //     setTasks({\n    //         ...tasks,\n    //         [todolistID]: tasks[todolistID].map(m => m.id === id ? {...m, isDone} : m)\n    //     })\n    // }\n\n    const removeTodolist = (todolistID: string) => dispatchTodolists(removeTodolistAC(todolistID))\n    // {\n    //     setTodolists(todolists.filter(f => f.id !== todolistID))\n    //     delete tasks[todolistID]\n    //     setTasks({...tasks})\n    // }\n    const addTodolist = (title: string) => {\n        const newTodolistId=v1()\n        dispatchTodolists(AddTodoAC(title,newTodolistId))\n        dispatchTasks(addNewTodoAC(newTodolistId))\n    }\n    // {\n    //     let newID = v1()\n    //     let newTodolist: TodolitsType = {id: newID, title: title, filter: 'all'}\n    //     setTodolists([newTodolist, ...todolists])\n    //     setTasks({...tasks, [newTodolist.id]: []})\n    // }\n    const changeTaskTitle = (id: string, title: string, todolistId: string) => dispatchTasks(changeTaskTitleAC(id, title,todolistId))\n    // {\n    //     setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, title: title} : m)})\n    // }\n    const onChangeTodolistTitle = (title: string, todolistID: string) => dispatchTodolists(ChangeTodoTitleAC(title,todolistID))\n    // {\n    //     setTodolists(todolists.map(m => m.id === todolistID ? {...m, title} : m))\n    // }\n\n    return <AppCase>\n        <AppBar position=\"static\" style={{opacity:'0.7'}}>\n            <Toolbar>\n                <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    sx={{mr: 2}}\n                >\n                    <Home fontSize=\"large\"/>\n                </IconButton>\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                    Space Todolist\n                </Typography>\n                <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n        </AppBar >\n        <Container fixed>\n            <Grid container style={{\n                padding: '10px',\n                backgroundColor: 'rgba(203, 209, 213,0.7)',\n                margin: '10px',\n                borderRadius: '10px',\n                display:'flex',\n                justifyContent:'flex-end'\n            }}>\n                <AddForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                <TodolistsMap todolists={todolists}\n                              tasks={tasks}\n                              removeTask={removeTask}\n                              changeFilter={changeFilter}\n                              addTask={addTask}\n                              changeTaskStatus={changeTaskStatus}\n                              removeTodolist={removeTodolist}\n                              changeTaskTitle={changeTaskTitle}\n                              onChangeTodolistTitle={onChangeTodolistTitle}/>\n            </Grid>\n        </Container>\n    </AppCase>\n}\n\nexport default App;\n\nconst AppCase = styled.div`\n  background: url(${img}) no-repeat center/cover;\n  height: 100vh;\n  overflow: auto;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}