{"version":3,"sources":["serviceWorker.ts","Components/State/TodolistsActions.ts","Components/State/TasksActions.ts","Components/State/TodolistReducer.ts","Components/State/TasksReducer.ts","Components/State/store.ts","Components/EditableSpan/EditableSpan.tsx","Components/ButtonRender.tsx","Components/Button/Button.tsx","Components/Checkbox/Checkbox.tsx","Components/Map/TasksMap.tsx","Components/Input/Input.tsx","Components/AddForm/AddForm.tsx","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","App.tsx","index.tsx","Components/Images/wallpaperflare.com_wallpaper.jpg"],"names":["Boolean","window","location","hostname","match","TodolistsActionsType","TasksActionsType","initialState","v1","initialTasks","rootReducer","combineReducers","todolists","state","action","type","RemoveTodo","filter","f","id","AddTodo","newTodolistId","title","ChangeTodoTitle","map","m","newTitle","ChangeTodoFilter","tasks","RemoveTask","todolistId","taskId","ChangeTaskStatus","isDone","AddTask","changeTaskTitle","addNewTodo","store","createStore","EditableSpan","React","memo","onChange","props","useState","setTitle","editM","setEditM","console","log","TextField","label","variant","value","autoFocus","e","currentTarget","onBlur","style","color","onDoubleClick","ButtonRender","name","callback","className","IconButton","onClick","size","aria-label","Delete","fontSize","Button","CheckboxX","useCallback","Checkbox","defaultChecked","TasksMap","dispatch","useDispatch","changeTaskStatus","ChangeTaskStatusAC","todolistID","changeTaskTitleAC","removeTask","TaskCase","opacity","key","display","flexDirection","justifyContent","alignItems","checked","styled","div","Input","error","onKeyPress","onChangeHandler","onKeyPressHandler","helperText","AddForm","setError","onChangeInput","addTaskButton","trim","addItem","Todolist","tasksX","useSelector","changeFilter","ChangeTodoFilterAC","removeTodolist","onChangeTodolistTitle","addTask","AddTaskAC","makeActive","tasksForRender","Grid","item","OpacityCase","TodolistsMap","todo","App","addTodolist","AddTodoAC","addNewTodoAC","AppCase","AppBar","position","Toolbar","edge","sx","mr","Home","Typography","component","flexGrow","Container","fixed","container","padding","backgroundColor","margin","borderRadius","spacing","img","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.2ffee4c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValueType} from \"./TodolistReducer\";\n\nexport enum TodolistsActionsType{\n    RemoveTodo='REMOVE_TODO',\n    AddTodo='ADD_TODO',\n    ChangeTodoTitle='CHANGE_TODO_TITLE',\n    ChangeTodoFilter='CHANGE_TODO_FILTER'\n}\nexport type RemoveTodoActionType = {\n    type: TodolistsActionsType.RemoveTodo\n    id: string\n}\nexport type AddTodoActionType = {\n    type: TodolistsActionsType.AddTodo\n    title: string\n    newTodolistId: string\n}\nexport type ChangeTodoTitleActionType = {\n    type: TodolistsActionsType.ChangeTodoTitle\n    id: string\n    newTitle: string\n}\nexport type ChangeTodoFilterActionType = {\n    type: TodolistsActionsType.ChangeTodoFilter\n    id: string\n    filter: FilterValueType\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodoActionType => {\n    return {type: TodolistsActionsType.RemoveTodo, id: todolistId} as const\n}\nexport const AddTodoAC = (newTitle: string, newTodolistId: string): AddTodoActionType => {\n    return {type: TodolistsActionsType.AddTodo, title: newTitle, newTodolistId: newTodolistId} as const\n}\nexport const ChangeTodoTitleAC = (newTitle: string, todolistId: string): ChangeTodoTitleActionType => {\n    return {type: TodolistsActionsType.ChangeTodoTitle, id: todolistId, newTitle: newTitle} as const\n}\nexport const ChangeTodoFilterAC = (filter: FilterValueType, todolistId: string,): ChangeTodoFilterActionType => {\n    return {type: TodolistsActionsType.ChangeTodoFilter, id: todolistId, filter: filter} as const\n}","import {FilterValueType} from \"./TodolistReducer\";\n\nexport enum TasksActionsType{\n    RemoveTask='REMOVE_TASK',\n    ChangeTaskStatus='CHANGE_TASK_STATUS',\n    AddTask='ADD_TASK',\n    changeTaskTitle='CHANGE_TASK_TITLE',\n    addNewTodo='ADD_NEW_TODO',\n    changeTasksFilter='CHANGE_TASK_FILTER'\n}\n\nexport type RemoveTaskActionType = ReturnType<typeof RemoveTaskAC>\nexport const RemoveTaskAC = (taskId: string, todolistId: string) => {\n    return {type: TasksActionsType.RemoveTask, taskId: taskId, todolistId: todolistId} as const\n}\n\nexport type changeTaskStatusAC = ReturnType<typeof ChangeTaskStatusAC>\nexport const ChangeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\n    return {type: TasksActionsType.ChangeTaskStatus, taskId: taskId, isDone: isDone, todolistId: todolistId} as const\n}\n\nexport type AddTaskActionType = ReturnType<typeof AddTaskAC>\nexport const AddTaskAC = (title: string, todolistId: string) => {\n    return {type: TasksActionsType.AddTask, title: title, todolistId: todolistId} as const\n}\n\nexport type changeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: TasksActionsType.changeTaskTitle, title: title, taskId: taskId, todolistId: todolistId} as const\n}\n\nexport type addNewTodoType = ReturnType<typeof addNewTodoAC>\nexport const addNewTodoAC = (newTodolistId: string) => {\n    return {type: TasksActionsType.addNewTodo, newTodolistId: newTodolistId} as const\n}\n\nexport type changeTasksFilterType = ReturnType<typeof changeTasksFilterAC>\nexport const changeTasksFilterAC = (todolistId: string, filter: FilterValueType) => {\n    return {type: TasksActionsType.changeTasksFilter, todolistId, filter} as const\n}","import {\n    todolist1,\n    todolist2,\n    todolist3,\n    todolist4,\n    todolist5,\n    todolist6,\n    todolist7,\n    todolist8,\n    todolist9\n} from \"./TasksReducer\";\nimport {\n    AddTodoActionType,\n    ChangeTodoFilterActionType,\n    ChangeTodoTitleActionType,\n    RemoveTodoActionType, TodolistsActionsType\n} from \"./TodolistsActions\";\n\nexport type FilterValueType = 'all' | 'active' | 'complited'\nexport type TodolitsType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\n\ntype ActionsType = RemoveTodoActionType | AddTodoActionType | ChangeTodoTitleActionType | ChangeTodoFilterActionType\n\nconst initialState: Array<TodolitsType> = [\n    // {id: todolist1, title: 'What to learn?', filter: 'all'},\n    // {id: todolist2, title: 'What to buy?', filter: 'all'},\n    // {id: todolist3, title: 'What to fixie?', filter: 'all'},\n    // {id: todolist4, title: 'C чего начать?', filter: 'all'},\n    // {id: todolist5, title: 'Куда сходить?', filter: 'all'},\n    // {id: todolist6, title: 'Что пить?', filter: 'all'},\n    // {id: todolist7, title: 'Как жить теперь?', filter: 'all'},\n    // {id: todolist8, title: 'Что позырить?', filter: 'all'},\n    // {id: todolist9, title: 'Что подарить?', filter: 'all'}\n]\nexport const todolistReducer = (state = initialState, action: ActionsType): Array<TodolitsType> => {\n        switch (action.type) {\n            case TodolistsActionsType.RemoveTodo: {\n                return state.filter(f => f.id !== action.id)\n            }\n            case TodolistsActionsType.AddTodo: {\n                return [{\n                    id: action.newTodolistId,\n                    title: action.title,\n                    filter: 'all'\n                }, ...state]\n            }\n            case TodolistsActionsType.ChangeTodoTitle: {\n                return state.map(m => m.id === action.id ? {...m, title: action.newTitle} : m)\n            }\n            case TodolistsActionsType.ChangeTodoFilter: {\n                return state.map(m => {\n                    return m.id === action.id ? {...m, filter: action.filter} : m\n                })\n            }\n            default:\n                return state\n        }\n    }\n;\n","import { TaskType} from \"../Todolist/Todolist\";\nimport {v1} from \"uuid\";\nimport {\n    addNewTodoType,\n    AddTaskActionType,\n    changeTasksFilterType,\n    changeTaskStatusAC,\n    changeTaskTitleType,\n    RemoveTaskActionType, TasksActionsType\n} from \"./TasksActions\";\n\nexport const todolist1 = v1()\nexport const todolist2 = v1()\nexport const todolist3 = v1()\nexport const todolist4 = v1()\nexport const todolist5 = v1()\nexport const todolist6 = v1()\nexport const todolist7 = v1()\nexport const todolist8 = v1()\nexport const todolist9 = v1()\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\nconst initialTasks: TaskStateType = {\n    // [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\n    //     {id: v1(), title: \"JS\", isDone: true},\n    //     {id: v1(), title: \"ReactJS\", isDone: false}],\n    // [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\n    //     {id: v1(), title: \"Milk\", isDone: false},\n    //     {id: v1(), title: \"Bread\", isDone: false}],\n    // [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\n    //     {id: v1(), title: \"Wheels\", isDone: false},\n    //     {id: v1(), title: \"Crank\", isDone: false}],\n    // [todolist4]: [{id: v1(), title: \"Тудулист\", isDone: true},\n    //     {id: v1(), title: \"Нативочка\", isDone: false},\n    //     {id: v1(), title: \"Чилл)))\", isDone: false}],\n    // [todolist5]: [{id: v1(), title: \"Домой вернуться\", isDone: true},\n    //     {id: v1(), title: \"Игровая комната\", isDone: true},\n    //     {id: v1(), title: \"В гости к маме)\", isDone: false}],\n    // [todolist6]: [{id: v1(), title: \"Чай\", isDone: true},\n    //     {id: v1(), title: \"Чай\", isDone: true},\n    //     {id: v1(), title: \"Чай\", isDone: false}],\n    // [todolist7]: [{id: v1(), title: \"по обс-вам(\", isDone: false},\n    //     {id: v1(), title: \"Выжить любой ценой\", isDone: false},\n    //     {id: v1(), title: \"Попытаться кайфануть)\", isDone: true}],\n    // [todolist8]: [{id: v1(), title: \"Мульты\", isDone: true},\n    //     {id: v1(), title: \"Сны\", isDone: true},\n    //     {id: v1(), title: \"Ничё\", isDone: false}],\n    // [todolist9]: [{id: v1(), title: \"Цветы\", isDone: false},\n    //     {id: v1(), title: \"Цветы\", isDone: false},\n    //     {id: v1(), title: \"Цветы)\", isDone: true}]\n}\n\nexport const tasksReducer = (state = initialTasks, action: ActionsType): TaskStateType => {\n    switch (action.type) {\n        case TasksActionsType.RemoveTask: {\n            return {...state, [action.todolistId]: state[action.todolistId].filter(f => f.id !== action.taskId)}\n        }\n        case TasksActionsType.ChangeTaskStatus: {\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {\n                    ...m,\n                    isDone: action.isDone\n                } : m)\n            }\n        }\n        case TasksActionsType.AddTask: {\n            return {\n                ...state,\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\n            }\n        }\n        case TasksActionsType.changeTaskTitle: {\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {\n                    ...m,\n                    title: action.title\n                } : m)\n            }\n        }\n        case TasksActionsType.addNewTodo: {\n            return {...state, [action.newTodolistId]: []}\n        }\n        default:\n            return state\n    }\n}\n\ntype ActionsType =\n    RemoveTaskActionType\n    | changeTaskStatusAC\n    | AddTaskActionType\n    | changeTaskTitleType\n    | addNewTodoType\n    | changeTasksFilterType","import {combineReducers, createStore} from \"redux\";\nimport {todolistReducer} from \"./TodolistReducer\";\nimport {tasksReducer} from \"./TasksReducer\";\n\nexport type rootReducerType = ReturnType<typeof rootReducer>\nconst rootReducer = combineReducers({\n    todolists: todolistReducer,\n    tasks: tasksReducer\n})\n\nexport const store = createStore(rootReducer)\n\n","import React, {useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (title: string) => void\n}\nexport const EditableSpanMemo = ({onChange, ...props}: EditableSpanPropsType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editM, setEditM] = useState<boolean>(false)\n\n    console.log('span render')\n    const activateEditM = () => {\n        setEditM(true)\n        setTitle(props.title)\n    }\n    const activateViewM = () => {\n        setEditM(false)\n        onChange(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editM\n        ? <TextField id=\"standard-basic\" label=\"Changes:\" variant=\"standard\" value={title} autoFocus\n                     onChange={onChangeHandler} onBlur={activateViewM}\n                     style={{color: 'white'}}/>\n        : <span onDoubleClick={activateEditM}\n        >{title}</span>\n}\nexport const EditableSpan = React.memo(EditableSpanMemo)","import React, {useMemo} from 'react';\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport DeblurIcon from '@mui/icons-material/Deblur';\n\n\nexport const ButtonRender = (name: string, callback: () => void, className?: string) => {\n    if (name === '+') {\n        return <IconButton style={{color: '#006bff'}} onClick={() => callback()} size={'large'}>\n            <DeblurIcon/>\n        </IconButton>\n\n    }\n    if (name === 'x') {\n        return <IconButton aria-label=\"delete\" size=\"small\" onClick={() => callback()}>\n            <Delete fontSize=\"small\"/>\n        </IconButton>\n    }\n    if (name === 'All') {\n        return <Button variant={className ? 'contained' : 'text'} onClick={() => callback()}>All</Button>\n    }\n    if (name === 'Active') {\n        return <Button variant={className ? 'contained' : 'text'} onClick={() => callback()}>Active</Button>\n    }\n    if (name === 'Complited') {\n        return <Button variant={className ? 'contained' : 'text'} onClick={() => callback()}>Complited</Button>\n    }\n}\n\n\n\n\nexport default ButtonRender;","import React from 'react';\nimport ButtonRender from \"../ButtonRender\";\n\ntype ButtonPropsType = {\n    name: string\n    callback: () => void\n    className?: string\n}\nexport const Button = React.memo(({name, callback, className}: ButtonPropsType) => {\n    console.log('button rendered')\n\n    return (<div>\n        {ButtonRender(name, callback, className)}\n    </div>)\n})","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox} from \"@mui/material\";\n\ntype CheckboxPropsType = {\n    isDone: boolean\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\n}\nexport const CheckboxX = React.memo((props: CheckboxPropsType) => {\n    console.log('checkBOX')\n    const callback = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        props.callback(e)\n    },[props.callback])\n    return <Checkbox color=\"secondary\"\n                     defaultChecked={props.isDone}\n                     onChange={(e: ChangeEvent<HTMLInputElement>) => callback(e)}/>\n})","import React, {useCallback} from \"react\";\nimport {TaskType} from \"../Todolist/Todolist\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Button/Button\";\nimport {CheckboxX} from \"../Checkbox/Checkbox\";\nimport styled from \"styled-components\";\nimport {useDispatch} from \"react-redux\";\nimport {ChangeTaskStatusAC, changeTaskTitleAC, RemoveTaskAC} from \"../State/TasksActions\";\n\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    id: string\n    todolistID: string\n}\nexport const TasksMapMemo = (props: TasksMapType) => {\n    const dispatch = useDispatch()\n\n    const changeTaskStatus = useCallback((id: string, isDone: boolean) => {\n        dispatch(ChangeTaskStatusAC(id, isDone, props.todolistID))\n    }, [dispatch, props.todolistID])\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(changeTaskTitleAC(props.id, title, props.todolistID))\n    }, [dispatch, props.todolistID,props.id])\n    const removeTask = useCallback((id: string) => {\n        dispatch(RemoveTaskAC(id, props.todolistID))\n    }, [dispatch,props.todolistID])\n\n\n    return (\n        <div>{\n            props.tasks.map(m => {\n                    return <TaskCase opacity={m.isDone ? '0.4' : '1'}\n                                     color={m.isDone ? 'rgba(109,4,234,0.77)' : 'rgba(28,16,0,0.8)'}\n                                     key={m.id} style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        justifyContent: \"space-between\",\n                        alignItems: 'center',\n                    }}>\n                        <CheckboxX isDone={m.isDone}\n                                   callback={(e) => changeTaskStatus(m.id, e.currentTarget.checked)}/>\n                        <EditableSpan title={m.title} onChange={changeTaskTitle}/>\n                        <Button name={'x'} callback={() => removeTask(m.id)}/>\n                    </TaskCase>\n                }\n            )\n        }\n        </div>\n    )\n}\nexport const TasksMap = React.memo(TasksMapMemo)\nconst TaskCase = styled.div<{ opacity: string, color: string }>`\n  opacity: ${props => props.opacity};\n  color: ${props => props.color};\n`","import React, {ChangeEvent} from 'react';\nimport {TextField} from \"@mui/material\";\n\ntype InputPropsType = {\n    error: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n    onKeyPress: (e: React.KeyboardEvent<HTMLDivElement>) => void\n}\n\nexport const Input = React.memo(({error, value, onChange, onKeyPress}: InputPropsType) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onChange(e)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => onKeyPress(e)\n\n    return <TextField id=\"outlined-basic\"\n                      label=\"New challenge\"\n                      variant=\"outlined\"\n                      value={value}\n                      onChange={(e) => onChangeHandler(e)}\n                      onKeyPress={(e) => onKeyPressHandler(e)}\n                      helperText={error}\n                      style={{color: 'whitesmoke'}}/>\n})","import {Input} from \"../Input/Input\";\nimport {Button} from \"../Button/Button\";\nimport React, {ChangeEvent, useCallback, useState} from \"react\";\n\n\ntype AddFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddFormMemo = (props: AddFormPropsType) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    console.log('add item form')\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLDivElement>) => (e.key === 'Enter') ? addTaskButton() : ''\n\n    const onChangeInput = useCallback((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    }, [])\n    const addTaskButton = useCallback(() => {\n        if (title.trim() !== '') {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is undefined !')\n        }\n    }, [props, title])\n\n    return <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n        < Input value={title}\n                onChange={onChangeInput}\n                onKeyPress={onKeyPressAdd}\n                error={error}/>\n        <Button name={'+'} callback={addTaskButton}/>\n    </div>\n}\n\nexport const AddForm = React.memo(AddFormMemo)","import React, {useCallback} from 'react';\nimport {TasksMap} from \"../Map/TasksMap\";\nimport {Button} from \"../Button/Button\";\nimport {AddForm} from \"../AddForm/AddForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Grid} from \"@mui/material\";\nimport styled from \"styled-components\";\nimport { FilterValueType} from \"../State/TodolistReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {rootReducerType} from \"../State/store\";\nimport {ChangeTodoFilterAC, ChangeTodoTitleAC, removeTodolistAC} from \"../State/TodolistsActions\";\nimport {AddTaskAC} from \"../State/TasksActions\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\ntype PropsType = {\n    title: string\n    filter: FilterValueType\n    todolistID: string\n}\n\nexport function TodolistMemo({\n                                 todolistID,\n                                 filter,\n                                 ...props\n                             }: PropsType) {\n\n    const dispatch = useDispatch()\n    const tasksX = useSelector<rootReducerType, Array<TaskType>>(state => state.tasks[todolistID])\n\n    const changeFilter = useCallback((filter: FilterValueType, todolistID: string) => {\n        dispatch(ChangeTodoFilterAC(filter, todolistID))\n    }, [dispatch])\n    const removeTodolist = useCallback((todolistID: string) => {\n        dispatch(removeTodolistAC(todolistID))\n    }, [dispatch])\n    const onChangeTodolistTitle = useCallback((title: string) => {\n        dispatch(ChangeTodoTitleAC(title, todolistID))\n    }, [dispatch, todolistID])\n\n    const addTask = useCallback((title: string) => {\n        console.log('addTask WORK')\n        dispatch(AddTaskAC(title, todolistID))\n    }, [dispatch, todolistID])\n\n    console.log(`render ${todolistID}`)\n    const makeActive = useCallback((value: string) => {\n       if (filter === value) {\n          return 'active-filter'\n       }\n    },[filter])\n\n    let tasksForRender = tasksX\n    if (filter === 'active') {\n        tasksForRender = tasksX.filter(f => !f.isDone)\n    }\n    if (filter === 'complited') {\n        tasksForRender = tasksX.filter(f => f.isDone)\n    }\n    return <Grid item>\n        <OpacityCase>\n            <h3 style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n                <EditableSpan title={props.title} onChange={onChangeTodolistTitle}/>\n                <Button name={'x'} callback={() => removeTodolist(todolistID)}/>\n            </h3>\n\n            <AddForm addItem={addTask}/>\n\n            <TasksMap\n                tasks={tasksForRender}\n                id={todolistID}\n                todolistID={todolistID}/>\n\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n                <Button name={'All'} callback={() => changeFilter('all', todolistID)}\n                        className={makeActive('all')}/>\n                <Button name={'Active'} callback={() => changeFilter('active', todolistID)}\n                        className={makeActive('active')}/>\n                <Button name={'Complited'} callback={() => changeFilter('complited', todolistID)}\n                        className={makeActive('complited')}/>\n            </div>\n        </OpacityCase>\n    </Grid>\n}\n\nexport const Todolist = React.memo(TodolistMemo)\n\n\nconst OpacityCase = styled.div`\n  background: rgba(203, 209, 213, 0.7);\n  padding: 15px;\n  border-radius: 10px;\n`","import {Todolist} from \"../Todolist/Todolist\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {rootReducerType} from \"../State/store\";\nimport {TodolitsType} from \"../State/TodolistReducer\";\n\nexport const TodolistsMapMemo = () => {\n    const todolists = useSelector<rootReducerType, Array<TodolitsType>>(state => state.todolists)\n\n    return <> {todolists.map(todo => {\n        return <Todolist key={todo.id}\n                         todolistID={todo.id}\n                         title={todo.title}\n                         filter={todo.filter}/>\n    })}\n    </>\n}\nexport const TodolistsMap = React.memo(TodolistsMapMemo)","import React, {useCallback} from 'react';\nimport './App.css';\nimport {v1} from \"uuid\";\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\nimport {AddForm} from \"./Components/AddForm/AddForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {Home} from '@mui/icons-material';\nimport styled from \"styled-components\";\nimport img from './Components/Images/wallpaperflare.com_wallpaper.jpg'\nimport {useDispatch} from \"react-redux\";\nimport {AddTodoAC} from \"./Components/State/TodolistsActions\";\nimport {addNewTodoAC} from \"./Components/State/TasksActions\";\n\nexport const App = React.memo(() => {\n    console.log('App render')\n    const dispatch = useDispatch()\n\n    const addTodolist = useCallback((title: string) => {\n        const newTodolistId = v1()\n        dispatch(AddTodoAC(title, newTodolistId))\n        dispatch(addNewTodoAC(newTodolistId))\n    }, [dispatch])\n\n    return <AppCase>\n        <AppBar position=\"static\" style={{opacity: '0.7'}}>\n            <Toolbar>\n                <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    sx={{mr: 2}}\n                >\n                    <Home fontSize=\"large\"/>\n                </IconButton>\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                    Space Todolist\n                </Typography>\n                <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n        </AppBar>\n        <Container fixed style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n            <Grid container style={{\n                padding: '10px',\n                backgroundColor: 'rgba(203, 209, 213,0.7)',\n                margin: '10px',\n                borderRadius: '10px',\n                display: 'flex',\n                justifyContent: 'flex-end'\n            }}>\n                <AddForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={1} style={{display: 'flex', justifyContent: 'center'}}>\n                <TodolistsMap/>\n            </Grid>\n        </Container>\n    </AppCase>\n})\n\nconst AppCase = styled.div`\n  background: url(${img}) no-repeat center/cover;\n  height: 100vh;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Components/State/store\";\nimport {App} from \"./App\";\n\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wallpaperflare.com_wallpaper.5940d32b.jpg\";"],"sourceRoot":""}