{"version":3,"sources":["Components/EditableSpan/EditableSpan.tsx","Components/Button/Button.tsx","Components/Map/TasksMap.tsx","Components/Input/Input.tsx","Components/AddForm/AddForm.tsx","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","onChange","props","useState","title","setTitle","editM","setEditM","value","autoFocus","e","currentTarget","onBlur","onDoubleClick","Button","name","callback","className","onClick","TasksMap","tasks","changeCheckbox","removeTaskX","map","m","key","id","isDone","type","checked","changeTaskTitle","Input","onKeyPress","onChangeHandler","onKeyPressHandler","AddForm","error","setError","addTaskButton","trim","addItem","Todolist","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","todolistID","filter","changeTasksFiler","makeActive","onChangeTodolistTitle","TodolistsMap","todolists","todo","tasksForRender","f","App","todolist1","v1","todolist2","todolist3","todolist4","todolist5","todolist6","todolist7","todolist8","todolist9","setTasks","setTodolists","newTodolist","todolistId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7a5feefb.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (title: string) => void\n}\nexport const EditableSpan = ({onChange, ...props}: EditableSpanPropsType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editM, setEditM] = useState<boolean>(false)\n    const activateEditM = () => {\n        setEditM(true)\n        setTitle(props.title)\n    }\n    const activateViewM = () => {\n        setEditM(false)\n        onChange(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editM\n        ? <input value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}/>\n        : <span onDoubleClick={activateEditM}>{title}</span>\n}","import React from 'react';\n\ntype ButtonPropsType = {\n    name: string\n    callback: () => void\n    className?: string\n}\nexport const Button = ({name, callback, className}: ButtonPropsType) => {\n    const onClickHandler = () => callback()\n\n    return <button className={className}\n                   onClick={(e) => onClickHandler()}>{name}</button>\n}","import React, {ChangeEvent} from \"react\";\nimport {TaskType} from \"../Todolist/Todolist\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Button/Button\";\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    changeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>) => void\n    removeTaskX: (id: string) => void\n    id: string\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\n}\nexport const TasksMap = ({tasks, changeCheckbox, removeTaskX, ...props}: TasksMapType) => {\n    return (\n        <ul>{\n            tasks.map(m => {\n                    const changeTaskTitle = (title: string) => {\n                        props.changeTaskTitle(m.id, title, props.id)\n                    }\n                    return <li key={m.id} className={m.isDone ? 'is-done' : ''}>\n                        <input type=\"checkbox\" checked={m.isDone}\n                               onChange={(e) => changeCheckbox(m.id, e)}/>\n                        <EditableSpan title={m.title} onChange={changeTaskTitle}/>\n                        <Button name={'x'} callback={() => removeTaskX(m.id)}/>\n                    </li>\n                }\n            )\n        }\n        </ul>\n    )\n}","import React, {ChangeEvent} from 'react';\n\ntype InputPropsType = {\n    className?: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    onKeyPress: (e: React.KeyboardEvent<HTMLInputElement>) => void\n}\n\nexport const Input = ({className, value, onChange, onKeyPress}: InputPropsType) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => onChange(e)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => onKeyPress(e)\n\n    return <input className={className}\n                  value={value}\n                  onChange={(e) => onChangeHandler(e)}\n                  onKeyPress={(e) => onKeyPressHandler(e)}/>\n}","import {Input} from \"../Input/Input\";\nimport {Button} from \"../Button/Button\";\nimport React, {ChangeEvent, useState} from \"react\";\n\ntype AddFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddForm = (props: AddFormPropsType) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    }\n    const addTaskButton = () => {\n        if (title.trim() !== '') {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is undefined !')\n        }\n    }\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLInputElement>) => (e.key === 'Enter') ? addTaskButton() : ''\n    return <div>\n        <Input value={title}\n               onChange={onChangeInput}\n               onKeyPress={onKeyPressAdd}\n               className={error ? 'error' : ''}/>\n        <Button name={'+'} callback={addTaskButton}/>\n        {error ? <div className={'error-message'}>{error}</div> : ''}\n    </div>\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TasksMap} from \"../Map/TasksMap\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {AddForm} from \"../AddForm/AddForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValueType = 'all' | 'active' | 'complited'\r\nexport type TodolitsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValueType\r\n    todolistID: string\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    onChangeTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             removeTodolist,\r\n                             todolistID,\r\n                             filter,\r\n                             ...props\r\n                         }: PropsType) {\r\n\r\n    const changeTasksFiler = (value: FilterValueType, todolistID: string) => changeFilter(value, todolistID)\r\n    const removeTaskX = (id: string) => removeTask(id, todolistID)\r\n    const changeCheckbox = (id: string, e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(id, e.currentTarget.checked, todolistID)\r\n    const removeTodolistX = () => removeTodolist(todolistID)\r\n    const makeActive = (value: string) => filter === value ? 'active-filter' : ''\r\n    const addTaskX = (title: string) => addTask(title, todolistID)\r\n    const onChangeTodolistTitle = (title: string) => props.onChangeTodolistTitle(todolistID, title)\r\n\r\n    return <div className={'todolist'}>\r\n        <h3>\r\n            <EditableSpan title={props.title} onChange={onChangeTodolistTitle}/>\r\n            <Button name={'x'} callback={removeTodolistX}/>\r\n        </h3>\r\n        <AddForm addItem={addTaskX}/>\r\n\r\n        <TasksMap tasks={props.tasks}\r\n                  changeCheckbox={changeCheckbox}\r\n                  removeTaskX={removeTaskX}\r\n                  id={todolistID}\r\n                  changeTaskTitle={props.changeTaskTitle}/>\r\n\r\n        <div>\r\n            <Button name={'All'} callback={() => changeTasksFiler('all', todolistID)}\r\n                    className={makeActive('all')}/>\r\n            <Button name={'Active'} callback={() => changeTasksFiler('active', todolistID)}\r\n                    className={makeActive('active')}/>\r\n            <Button name={'Complited'} callback={() => changeTasksFiler('complited', todolistID)}\r\n                    className={makeActive('complited')}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import {FilterValueType, TaskStateType, Todolist, TodolitsType} from \"../Todolist/Todolist\";\nimport React from \"react\";\n\n\ntype TodolistsMapType = {\n    todolists: Array<TodolitsType>\n    tasks: TaskStateType\n    removeTask: (id: string, todolistID: string) => void\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\n    removeTodolist: (todolistID: string) => void\n    changeTaskTitle:(id:string, title:string,todolistId:string)=>void\n    onChangeTodolistTitle:(title:string,todolistId:string)=>void\n}\nexport const TodolistsMap = ({\n                                 todolists,\n                                 tasks,\n                                 removeTask,\n                                 changeFilter,\n                                 addTask,\n                                 changeTaskStatus,\n                                 removeTodolist,\n                                 ...props\n                             }: TodolistsMapType) => {\n    return (\n        <div className=\"App\">\n            {todolists.map(todo => {\n                let tasksForRender = tasks[todo.id]\n                if (todo.filter === 'active') {\n                    tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n                }\n                if (todo.filter === 'complited') {\n                    tasksForRender = tasks[todo.id].filter(f => f.isDone)\n                }\n                return <Todolist key={todo.id}\n                                 todolistID={todo.id}\n                                 title={todo.title}\n                                 tasks={tasksForRender}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeTaskStatus={changeTaskStatus}\n                                 filter={todo.filter}\n                                 removeTodolist={removeTodolist}\n                                 changeTaskTitle={props.changeTaskTitle}\n                                 onChangeTodolistTitle={props.onChangeTodolistTitle}/>\n            })}\n        </div>\n    );\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType, TaskStateType, TodolitsType} from './Components/Todolist/Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\r\nimport {AddForm} from \"./Components/AddForm/AddForm\";\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n    const todolist3 = v1()\r\n    const todolist4 = v1()\r\n    const todolist5 = v1()\r\n    const todolist6 = v1()\r\n    const todolist7 = v1()\r\n    const todolist8 = v1()\r\n    const todolist9 = v1()\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false}],\r\n            [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\r\n                {id: v1(), title: \"Milk\", isDone: false},\r\n                {id: v1(), title: \"Bread\", isDone: false}],\r\n            [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\r\n                {id: v1(), title: \"Wheels\", isDone: false},\r\n                {id: v1(), title: \"Crank\", isDone: false}],\r\n            [todolist4]: [{id: v1(), title: \"Тудулист\", isDone: true},\r\n                {id: v1(), title: \"Нативочка\", isDone: false},\r\n                {id: v1(), title: \"Чилл)))\", isDone: false}],\r\n            [todolist5]: [{id: v1(), title: \"Домой вернуться\", isDone: true},\r\n                {id: v1(), title: \"Игровая комната\", isDone: true},\r\n                {id: v1(), title: \"В гости к маме)\", isDone: false}],\r\n            [todolist6]: [{id: v1(), title: \"Чай\", isDone: true},\r\n                {id: v1(), title: \"Чай\", isDone: true},\r\n                {id: v1(), title: \"Чай\", isDone: false}],\r\n            [todolist7]: [{id: v1(), title: \"по обс-вам(\", isDone: false},\r\n                {id: v1(), title: \"Выжить любой ценой\", isDone: false},\r\n                {id: v1(), title: \"Попытаться кайфануть)\", isDone: true}],\r\n            [todolist8]: [{id: v1(), title: \"Мульты\", isDone: true},\r\n                {id: v1(), title: \"Сны\", isDone: true},\r\n                {id: v1(), title: \"Ничё\", isDone: false}],\r\n            [todolist9]: [{id: v1(), title: \"Цветы\", isDone: false},\r\n                {id: v1(), title: \"Цветы\", isDone: false},\r\n                {id: v1(), title: \"Цветы)\", isDone: true}]\r\n        }\r\n    )\r\n    const [todolists, setTodolists] = useState<Array<TodolitsType>>([\r\n        {id: todolist1, title: 'What to learn?', filter: 'all'},\r\n        {id: todolist2, title: 'What to buy?', filter: 'all'},\r\n        {id: todolist3, title: 'What to fixie?', filter: 'all'},\r\n        {id: todolist4, title: 'C чего начать?', filter: 'all'},\r\n        {id: todolist5, title: 'Куда сходить?', filter: 'all'},\r\n        {id: todolist6, title: 'Что пить?', filter: 'all'},\r\n        {id: todolist7, title: 'Как жить теперь?', filter: 'all'},\r\n        {id: todolist8, title: 'Что позырить?', filter: 'all'},\r\n        {id: todolist9, title: 'Что подарить?', filter: 'all'}\r\n    ])\r\n\r\n    const removeTask = (id: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: tasks[todolistID].filter(f => f.id !== id)\r\n    })\r\n\r\n    const changeFilter = (filter: FilterValueType, todolistID: string) => setTodolists(todolists.map(m => m.id === todolistID ? {\r\n        ...m,\r\n        filter: filter\r\n    } : m))\r\n\r\n    const addTask = (title: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]\r\n    })\r\n\r\n    const changeTaskStatus = (id: string, isDone: boolean, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: tasks[todolistID].map(m => m.id === id ? {...m, isDone} : m)\r\n    })\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(f => f.id !== todolistID))\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        let newID = v1()\r\n        let newTodolist: TodolitsType = {id: newID, title: title, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolist.id]: []})\r\n    }\r\n    const changeTaskTitle = (id: string, title: string, todolistId: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, title: title} : m)})\r\n    }\r\n    const onChangeTodolistTitle = (title: string, todolistID: string) => {\r\n        setTodolists(todolists.map(m => m.id === todolistID ? {...m, title} : m))\r\n    }\r\n\r\n    return <div className={'main'}>\r\n        <div className={'head'}>\r\n            <span className={'headText'}> What do you want to do/ change/ fix:</span>\r\n            <AddForm addItem={addTodolist}/>\r\n        </div>\r\n        <TodolistsMap todolists={todolists}\r\n                      tasks={tasks}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      removeTodolist={removeTodolist}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      onChangeTodolistTitle={onChangeTodolistTitle}/>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}