{"version":3,"sources":["Components/EditableSpan/EditableSpan.tsx","Components/ButtonRender.tsx","Components/Button/Button.tsx","Components/Checkbox/Checkbox.tsx","Components/State/TasksReducer.ts","Components/Map/TasksMap.tsx","Components/Input/Input.tsx","Components/AddForm/AddForm.tsx","Components/State/TodolistReducer.ts","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","App.tsx","serviceWorker.ts","Components/State/store.ts","index.tsx","Components/Images/wallpaperflare.com_wallpaper.jpg"],"names":["EditableSpan","React","memo","onChange","props","useState","title","setTitle","editM","setEditM","TextField","id","label","variant","value","autoFocus","e","currentTarget","onBlur","style","color","onDoubleClick","ButtonRender","name","callback","className","IconButton","onClick","size","aria-label","Delete","fontSize","Button","CheckboxX","Checkbox","defaultChecked","isDone","todolist1","v1","todolist2","todolist3","todolist4","todolist5","todolist6","todolist7","todolist8","todolist9","initialTasks","TasksMap","dispatch","useDispatch","changeTaskStatus","useCallback","taskId","todolistId","type","ChangeTaskStatusAC","todolistID","changeTaskTitle","changeTaskTitleAC","removeTask","tasks","map","m","TaskCase","opacity","key","display","flexDirection","justifyContent","alignItems","checked","styled","div","Input","error","onKeyPress","onChangeHandler","onKeyPressHandler","helperText","AddForm","setError","onChangeInput","addTaskButton","trim","addItem","initialState","filter","Todolist","changeFilter","ChangeTodoFilterAC","removeTodolist","onChangeTodolistTitle","newTitle","addTask","console","log","AddTaskAC","makeActive","Grid","item","OpacityCase","TodolistsMap","useSelector","state","todolists","todo","tasksForRender","f","App","addTodolist","newTodolistId","AddTodoAC","addNewTodoAC","AppCase","AppBar","position","Toolbar","edge","sx","mr","Home","Typography","component","flexGrow","Container","fixed","container","padding","backgroundColor","margin","borderRadius","spacing","img","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.9be0dab1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (title: string) => void\n}\nexport const EditableSpanMemo = ({onChange, ...props}: EditableSpanPropsType) => {\n    const [title, setTitle] = useState<string>(props.title)\n    const [editM, setEditM] = useState<boolean>(false)\n    const activateEditM = () => {\n        setEditM(true)\n        setTitle(props.title)\n    }\n    const activateViewM = () => {\n        setEditM(false)\n        onChange(title)\n    }\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editM\n        ?<TextField id=\"standard-basic\" label=\"Changes:\" variant=\"standard\" value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}\n        style={{color:'white'}}/>\n        // <input value={title} autoFocus onChange={onChangeHandler} onBlur={activateViewM}/>\n        : <span onDoubleClick={activateEditM}\n                // style={{color:'rgba(28,16,0,0.8)'}}\n        >{title}</span>\n}\nexport const EditableSpan=React.memo(EditableSpanMemo)","import React from 'react';\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete, ShutterSpeed} from \"@mui/icons-material\";\nimport DeblurIcon from '@mui/icons-material/Deblur';\n\n\n\nexport const ButtonRender = (name: string, callback: () => void, className?: string) => {\n    if(name==='+'){\n        return <IconButton  style={{color:'#006bff'}} onClick={()=>callback()} size={'large'}>\n            <DeblurIcon/>\n        </IconButton>\n\n    }\n    if(name==='x'){\n        return <IconButton aria-label=\"delete\" size=\"small\" onClick={()=>callback()}>\n            <Delete fontSize=\"small\" />\n        </IconButton>\n    }\n    if(name==='All'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>All</Button>\n    }\n    if(name==='Active'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Active</Button>\n    }\n    if(name==='Complited'){\n        return <Button variant={className?'contained':'text'} onClick={()=>callback()}>Complited</Button>\n    }\n\n\n};\n\nexport default ButtonRender;","import React from 'react';\nimport ButtonRender from \"../ButtonRender\";\n\ntype ButtonPropsType = {\n    name: string\n    callback: () => void\n    className?: string\n}\nexport const Button = ({name, callback, className}: ButtonPropsType) => {\n    // const onClickHandler = () => callback()\n\n    return (<div>\n        {ButtonRender(name, callback, className)}\n    </div>)\n\n    // <button className={className}\n    //                onClick={(e) => onClickHandler()}>{name}</button>\n}","import React, {ChangeEvent} from \"react\";\nimport {Checkbox} from \"@mui/material\";\n\ntype CheckboxPropsType = {\n    isDone: boolean\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\n}\nexport const CheckboxX = (props: CheckboxPropsType) => {\n    const callback = (e: ChangeEvent<HTMLInputElement>) => {\n        props.callback(e)\n    }\n    return <Checkbox color=\"secondary\"\n                     defaultChecked={props.isDone}\n                     onChange={(e: ChangeEvent<HTMLInputElement>) => callback(e)}/>\n}","import {FilterValueType, TaskStateType} from \"../Todolist/Todolist\";\nimport {v1} from \"uuid\";\n\nexport const todolist1 = v1()\nexport const todolist2 = v1()\nexport const todolist3 = v1()\nexport const todolist4 = v1()\nexport const todolist5 = v1()\nexport const todolist6 = v1()\nexport const todolist7 = v1()\nexport const todolist8 = v1()\nexport const todolist9 = v1()\n\nconst initialTasks: TaskStateType = {\n    [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\n        {id: v1(), title: \"JS\", isDone: true},\n        {id: v1(), title: \"ReactJS\", isDone: false}],\n    [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\n        {id: v1(), title: \"Milk\", isDone: false},\n        {id: v1(), title: \"Bread\", isDone: false}],\n    [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\n        {id: v1(), title: \"Wheels\", isDone: false},\n        {id: v1(), title: \"Crank\", isDone: false}],\n    [todolist4]: [{id: v1(), title: \"Тудулист\", isDone: true},\n        {id: v1(), title: \"Нативочка\", isDone: false},\n        {id: v1(), title: \"Чилл)))\", isDone: false}],\n    [todolist5]: [{id: v1(), title: \"Домой вернуться\", isDone: true},\n        {id: v1(), title: \"Игровая комната\", isDone: true},\n        {id: v1(), title: \"В гости к маме)\", isDone: false}],\n    [todolist6]: [{id: v1(), title: \"Чай\", isDone: true},\n        {id: v1(), title: \"Чай\", isDone: true},\n        {id: v1(), title: \"Чай\", isDone: false}],\n    [todolist7]: [{id: v1(), title: \"по обс-вам(\", isDone: false},\n        {id: v1(), title: \"Выжить любой ценой\", isDone: false},\n        {id: v1(), title: \"Попытаться кайфануть)\", isDone: true}],\n    [todolist8]: [{id: v1(), title: \"Мульты\", isDone: true},\n        {id: v1(), title: \"Сны\", isDone: true},\n        {id: v1(), title: \"Ничё\", isDone: false}],\n    [todolist9]: [{id: v1(), title: \"Цветы\", isDone: false},\n        {id: v1(), title: \"Цветы\", isDone: false},\n        {id: v1(), title: \"Цветы)\", isDone: true}]\n}\n\nexport const tasksReducer = (state = initialTasks, action: ActionsType): TaskStateType => {\n    switch (action.type) {\n        case 'REMOVE_TASK': {\n            return {...state, [action.todolistId]: state[action.todolistId].filter(f => f.id !== action.taskId)}\n        }\n        case 'CHANGE_TASK_STATUS': {\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {\n                    ...m,\n                    isDone: action.isDone\n                } : m)\n            }\n        }\n        case 'ADD_TASK': {\n            return {\n                ...state,\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\n            }\n        }\n        case 'CHANGE_TASK_TITLE': {\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {\n                    ...m,\n                    title: action.title\n                } : m)\n            }\n        }\n        case 'ADD_NEW_TODO': {\n            return {...state, [action.newTodolistId]: []}\n        }\n        case 'CHANGE_TASK_FILTER': {\n            if (action.filter === 'active') {\n                console.log(action.filter)\n                return {...state, [action.todolistId]: state[action.todolistId].filter(m => !m.isDone)}\n            }\n            if (action.filter === 'complited') {\n                console.log(action.filter)\n                return {...state, [action.todolistId]: state[action.todolistId].filter(m => m.isDone)}\n            }\n            console.log(action.filter)\n            return {...state}\n        }\n        default:\n            return state\n    }\n}\n\ntype ActionsType =\n    RemoveTaskActionType\n    | changeTaskStatusAC\n    | AddTaskActionType\n    | changeTaskTitleType\n    | addNewTodoType\n    | changeTasksFilterType\n\ntype RemoveTaskActionType = ReturnType<typeof RemoveTaskAC>\nexport const RemoveTaskAC = (taskId: string, todolistId: string) => {\n    return {type: 'REMOVE_TASK', taskId: taskId, todolistId: todolistId} as const\n}\n\ntype changeTaskStatusAC = ReturnType<typeof ChangeTaskStatusAC>\nexport const ChangeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\n    return {type: 'CHANGE_TASK_STATUS', taskId: taskId, isDone: isDone, todolistId: todolistId} as const\n}\n\ntype AddTaskActionType = ReturnType<typeof AddTaskAC>\nexport const AddTaskAC = (title: string, todolistId: string) => {\n    return {type: 'ADD_TASK', title: title, todolistId: todolistId} as const\n}\n\ntype changeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: 'CHANGE_TASK_TITLE', title: title, taskId: taskId, todolistId: todolistId} as const\n}\n\ntype addNewTodoType = ReturnType<typeof addNewTodoAC>\nexport const addNewTodoAC = (newTodolistId: string) => {\n    return {type: 'ADD_NEW_TODO', newTodolistId: newTodolistId} as const\n}\n\ntype changeTasksFilterType = ReturnType<typeof changeTasksFilterAC>\nexport const changeTasksFilterAC = (todolistId: string, filter: FilterValueType) => {\n    return {type: 'CHANGE_TASK_FILTER', todolistId, filter} as const\n}","import React, {useCallback} from \"react\";\nimport {TaskType} from \"../Todolist/Todolist\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Button/Button\";\nimport {CheckboxX} from \"../Checkbox/Checkbox\";\nimport styled from \"styled-components\";\nimport {useDispatch} from \"react-redux\";\nimport {ChangeTaskStatusAC, changeTaskTitleAC, RemoveTaskAC} from \"../State/TasksReducer\";\n\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    id: string\n    todolistID: string\n}\nexport const TasksMapMemo = (props: TasksMapType) => {\n    const dispatch = useDispatch()\n\n    const changeTaskStatus = useCallback((id: string, isDone: boolean) => {\n        dispatch(ChangeTaskStatusAC(id, isDone, props.todolistID))\n    }, [dispatch, props.todolistID])\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(changeTaskTitleAC(props.id, title, props.todolistID))\n    }, [dispatch, props.todolistID,props.id])\n    const removeTask = useCallback((id: string) => {\n        dispatch(RemoveTaskAC(id, props.todolistID))\n    }, [dispatch,props.todolistID])\n\n\n    return (\n        <div>{\n            props.tasks.map(m => {\n                    return <TaskCase opacity={m.isDone ? '0.4' : '1'}\n                                     color={m.isDone ? 'rgba(109,4,234,0.77)' : 'rgba(28,16,0,0.8)'}\n                                     key={m.id} style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        justifyContent: \"space-between\",\n                        alignItems: 'center',\n                    }}>\n                        <CheckboxX isDone={m.isDone}\n                                   callback={(e) => changeTaskStatus(m.id, e.currentTarget.checked)}/>\n                        <EditableSpan title={m.title} onChange={changeTaskTitle}/>\n                        <Button name={'x'} callback={() => removeTask(m.id)}/>\n                    </TaskCase>\n                }\n            )\n        }\n        </div>\n    )\n}\nexport const TasksMap = React.memo(TasksMapMemo)\nconst TaskCase = styled.div<{ opacity: string, color: string }>`\n  opacity: ${props => props.opacity};\n  color: ${props => props.color};\n`","import React, {ChangeEvent} from 'react';\nimport {TextField} from \"@mui/material\";\n\ntype InputPropsType = {\n    error: string\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n    onKeyPress: (e: React.KeyboardEvent<HTMLDivElement>) => void\n}\n\nexport const Input = ({error, value, onChange, onKeyPress}: InputPropsType) => {\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onChange(e)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLDivElement>) => onKeyPress(e)\n\n    return <TextField id=\"outlined-basic\"\n                      label=\"New challenge\"\n                      variant=\"outlined\"\n                      value={value}\n                      onChange={(e) => onChangeHandler(e)}\n                      onKeyPress={(e) => onKeyPressHandler(e)}\n                      helperText={error}\n                      style={{color: 'whitesmoke'}}/>\n\n    // <input className={className}\n    //               value={value}\n    //               onChange={(e) => onChangeHandler(e)}\n    //               onKeyPress={(e) => onKeyPressHandler(e)}/>\n}","import {Input} from \"../Input/Input\";\nimport {Button} from \"../Button/Button\";\nimport React, {ChangeEvent, useCallback, useState} from \"react\";\n\n\ntype AddFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddFormMemo = (props: AddFormPropsType) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    // const onChangeInput = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    //     setError('')\n    //     setTitle(e.currentTarget.value)\n    // }\n    // const addTaskButton = () => {\n    //     if (title.trim() !== '') {\n    //         props.addItem(title.trim())\n    //         setTitle('')\n    //     } else {\n    //         setError('Title is undefined !')\n    //     }\n    // }\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLDivElement>) => (e.key === 'Enter') ? addTaskButton() : ''\n\n    const onChangeInput = useCallback((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    }, [])\n    const addTaskButton = useCallback(() => {\n        if (title.trim() !== '') {\n            props.addItem(title.trim())\n            setTitle('')\n        } else {\n            setError('Title is undefined !')\n        }\n    }, [props, title])\n\n    return <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}} >\n    < Input value={title}\n        onChange={onChangeInput}\n        onKeyPress={onKeyPressAdd}\n        error={error}/>\n        <Button name={'+'} callback={addTaskButton}/>\n    {/*{error ? <div className={'error-message'}>{error}</div> : ''}*/}\n        </div>\n    }\n\n                export const AddForm=React.memo(AddFormMemo\n)","import {FilterValueType, TodolitsType} from \"../Todolist/Todolist\";\nimport {\n    todolist1,\n    todolist2,\n    todolist3,\n    todolist4,\n    todolist5,\n    todolist6,\n    todolist7,\n    todolist8,\n    todolist9\n} from \"./TasksReducer\";\n\n\ntype ActionsType = RemoveTodoActionType | AddTodoActionType | ChangeTodoTitleActionType | ChangeTodoFilterActionType\n\ntype RemoveTodoActionType = {\n    type: 'REMOVE_TODO'\n    id: string\n}\ntype AddTodoActionType = {\n    type: 'ADD_TODO'\n    title: string\n    newTodolistId: string\n}\ntype ChangeTodoTitleActionType = {\n    type: 'CHANGE_TODO_TITLE'\n    id: string\n    newTitle: string\n}\ntype ChangeTodoFilterActionType = {\n    type: 'CHANGE_TODO_FILTER'\n    id: string\n    filter: FilterValueType\n}\n\nconst initialState: Array<TodolitsType> = [\n    {id: todolist1, title: 'What to learn?', filter: 'all'},\n    {id: todolist2, title: 'What to buy?', filter: 'all'},\n    {id: todolist3, title: 'What to fixie?', filter: 'all'},\n    {id: todolist4, title: 'C чего начать?', filter: 'all'},\n    {id: todolist5, title: 'Куда сходить?', filter: 'all'},\n    {id: todolist6, title: 'Что пить?', filter: 'all'},\n    {id: todolist7, title: 'Как жить теперь?', filter: 'all'},\n    {id: todolist8, title: 'Что позырить?', filter: 'all'},\n    {id: todolist9, title: 'Что подарить?', filter: 'all'}\n]\nexport const todolistReducer = (state = initialState, action: ActionsType): Array<TodolitsType> => {\n        switch (action.type) {\n            case 'REMOVE_TODO': {\n                return state.filter(f => f.id !== action.id)\n            }\n            case 'ADD_TODO': {\n                return [{\n                    id: action.newTodolistId,\n                    title: action.title,\n                    filter: 'all'\n                }, ...state]\n            }\n            case 'CHANGE_TODO_TITLE': {\n                return state.map(m => m.id === action.id ? {...m, title: action.newTitle} : m)\n            }\n            case 'CHANGE_TODO_FILTER': {\n\n                return state.map(m => {\n\n\n\n                    return  m.id === action.id ? {...m, filter: action.filter} : m\n                })\n            }\n            default:\n                return state\n        }\n    }\n;\nexport const removeTodolistAC = (todolistId: string): RemoveTodoActionType => {\n    return {type: 'REMOVE_TODO', id: todolistId} as const\n}\nexport const AddTodoAC = (newTitle: string, newTodolistId: string): AddTodoActionType => {\n    return {type: 'ADD_TODO', title: newTitle, newTodolistId: newTodolistId} as const\n}\nexport const ChangeTodoTitleAC = (newTitle: string, todolistId: string): ChangeTodoTitleActionType => {\n    return {type: 'CHANGE_TODO_TITLE', id: todolistId, newTitle: newTitle} as const\n}\nexport const ChangeTodoFilterAC = (filter: FilterValueType, todolistId: string,): ChangeTodoFilterActionType => {\n    return {type: 'CHANGE_TODO_FILTER', id: todolistId, filter: filter} as const\n}","import React, {useCallback} from 'react';\nimport {TasksMap} from \"../Map/TasksMap\";\nimport {Button} from \"../Button/Button\";\nimport {AddForm} from \"../AddForm/AddForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Grid} from \"@mui/material\";\nimport styled from \"styled-components\";\nimport {ChangeTodoFilterAC, ChangeTodoTitleAC, removeTodolistAC} from \"../State/TodolistReducer\";\nimport {useDispatch} from \"react-redux\";\nimport {AddTaskAC} from \"../State/TasksReducer\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type FilterValueType = 'all' | 'active' | 'complited'\nexport type TodolitsType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValueType\n    todolistID: string\n}\n\nexport function TodolistMemo({\n                                 todolistID,\n                                 filter,\n                                 ...props\n                             }: PropsType) {\n\n\n    const dispatch = useDispatch()\n\n    const changeFilter = useCallback((filter: FilterValueType, todolistID: string) => {\n        dispatch(ChangeTodoFilterAC(filter, todolistID))\n        // dispatch(changeTasksFilterAC(todolistID,filter))\n    }, [dispatch])\n    const removeTodolist = useCallback((todolistID: string) => {\n        dispatch(removeTodolistAC(todolistID))\n    }, [dispatch])\n    const onChangeTodolistTitle = useCallback((title: string) => {\n        dispatch(ChangeTodoTitleAC(title, todolistID))\n    }, [dispatch, todolistID])\n\n    // const makeActive = (value: string) => filter === value ? 'active-filter' : ''\n\n    const addTask = useCallback((title: string) => {\n        console.log('addTask WORK')\n        dispatch(AddTaskAC(title, todolistID))\n    }, [dispatch, todolistID])\n\n    // const TodolistRender = useMemo(() => {\n\n        console.log(`render ${todolistID}`)\n        const makeActive = (value: string) => filter === value ? 'active-filter' : ''\n\n        return <Grid item>\n            <OpacityCase>\n                <h3 style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n                    <EditableSpan title={props.title} onChange={onChangeTodolistTitle}/>\n                    <Button name={'x'} callback={() => removeTodolist(todolistID)}/>\n                </h3>\n\n                <AddForm addItem={addTask}/>\n\n                <TasksMap\n                    tasks={props.tasks}\n                    id={todolistID}\n                    todolistID={todolistID}/>\n\n                <div style={{display: 'flex', flexDirection: 'row'}}>\n                    <Button name={'All'} callback={() => changeFilter('all', todolistID)}\n                            className={makeActive('all')}/>\n                    <Button name={'Active'} callback={() => changeFilter('active', todolistID)}\n                            className={makeActive('active')}/>\n                    <Button name={'Complited'} callback={() => changeFilter('complited', todolistID)}\n                            className={makeActive('complited')}/>\n                </div>\n            </OpacityCase>\n        </Grid>\n    // }, [todolistID, addTask, changeFilter, onChangeTodolistTitle, props.tasks, props.title, removeTodolist, filter]);\n\n    // return <> {TodolistRender}</>\n}\n\nexport const Todolist = React.memo(TodolistMemo)\n\n\nconst OpacityCase = styled.div`\n  background: rgba(203, 209, 213, 0.7);\n  padding: 15px;\n  border-radius: 10px;\n`\n\n// export function TodolistMemo({\n//                                  todolistID,\n//                                  filter,\n//                                  ...props\n//                              }: PropsType) {\n//     console.log('render ')\n//\n//     const dispatch = useDispatch()\n//\n//     const changeFilter = useCallback((filter: FilterValueType, todolistID: string) => {\n//         dispatch(ChangeTodoFilterAC(filter, todolistID))\n//     }, [dispatch,filter,todolistID])\n//     const removeTodolist = useCallback((todolistID: string) => {\n//         dispatch(removeTodolistAC(todolistID))\n//     }, [dispatch,todolistID])\n//     const onChangeTodolistTitle = useCallback((title: string) => {\n//         dispatch(ChangeTodoTitleAC(title, todolistID))\n//     }, [dispatch,todolistID])\n//\n//     const makeActive = (value: string) => filter === value ? 'active-filter' : ''\n//\n//     const addTask = useCallback((title: string) => {\n//         console.log('addTask WORK')\n//         dispatch(AddTaskAC(title, todolistID))\n//     }, [dispatch,todolistID])\n//\n//     const todoID=useSelector<rootReducerType,Array<TodolitsType>>(state=>state.todolists)\n//\n//\n//     return <Grid item>\n//         <OpacityCase>\n//             <h3 style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n//                 <EditableSpan title={props.title} onChange={onChangeTodolistTitle}/>\n//                 <Button name={'x'} callback={() => removeTodolist(todolistID)}/>\n//             </h3>\n//\n//             <AddForm addItem={addTask}/>\n//\n//             <TasksMap\n//                 tasks={props.tasks}\n//                 id={todolistID}\n//                 todolistID={todolistID}/>\n//\n//             <div style={{display: 'flex', flexDirection: 'row'}}>\n//                 <Button name={'All'} callback={() => changeFilter('all', todolistID)}\n//                         className={makeActive('all')}/>\n//                 <Button name={'Active'} callback={() => changeFilter('active', todolistID)}\n//                         className={makeActive('active')}/>\n//                 <Button name={'Complited'} callback={() => changeFilter('complited', todolistID)}\n//                         className={makeActive('complited')}/>\n//             </div>\n//         </OpacityCase>\n//     </Grid>\n// }\n//\n","import {TaskStateType, Todolist, TodolitsType} from \"../Todolist/Todolist\";\nimport React, {useMemo} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {rootReducerType} from \"../State/store\";\n\n// export const TodolistsMapMemo = () => {\n//\n//     const [id,setId]=useState<string>('')\n//     const getId=(id:string)=>setId(id)\n//\n//     const tasks = useSelector<rootReducerType, TaskStateType>(state => state.tasks)\n//     const todolists = useSelector<rootReducerType, Array<TodolitsType>>(state => state.todolists)\n//\n//\n//     const thingToRender = useMemo(() => {\n//         return <> {todolists.map(todo => {\n//\n//\n//\n//\n//             let tasksForRender = tasks[todo.id]\n//             if (todo.filter === 'active') {\n//                 tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n//             }\n//             if (todo.filter === 'complited') {\n//                 tasksForRender = tasks[todo.id].filter(f => f.isDone)\n//             }\n//             return <Todolist key={todo.id}\n//                              todolistID={todo.id}\n//                              title={todo.title}\n//                              tasks={tasksForRender}\n//                              filter={todo.filter}\n//             />\n//         })}\n//         </>\n//     }, []);\n//     return <> {thingToRender}</>\n// }\n\nexport const TodolistsMapMemo = () => {\n\n    const tasks = useSelector<rootReducerType, TaskStateType>(state => state.tasks)\n    const todolists = useSelector<rootReducerType, Array<TodolitsType>>(state => state.todolists)\n\n    // const tasksActualFilter = useMemo(() => {\n    //     const returnedFilteredTasks = todolists.map(todo => {\n    //         let tasksForRender = tasks[todo.id]\n    //         if (todo.filter === 'active') {\n    //             tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n    //         }\n    //         if (todo.filter === 'complited') {\n    //             tasksForRender = tasks[todo.id].filter(f => f.isDone)\n    //         }\n    //         return tasksForRender\n    //     })\n    //     return returnedFilteredTasks\n    // }, [todolists, tasks]);\n    //\n    // console.log(tasksActualFilter)\n\n    return <> {todolists.map(todo => {\n        let tasksForRender = tasks[todo.id]\n        if (todo.filter === 'active') {\n            tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n        }\n        if (todo.filter === 'complited') {\n            tasksForRender = tasks[todo.id].filter(f => f.isDone)\n        }\n        return <Todolist key={todo.id}\n                         todolistID={todo.id}\n                         title={todo.title}\n                         tasks={tasksForRender}\n                         filter={todo.filter}/>\n    })}\n    </>\n}\nexport const TodolistsMap = React.memo(TodolistsMapMemo)\n\n// {\n//\n//     const tasks = useSelector<rootReducerType, TaskStateType>(state => state.tasks)\n//     const todolists = useSelector<rootReducerType, Array<TodolitsType>>(state => state.todolists)\n//\n//     return <> {todolists.map(todo => {\n//         let tasksForRender = tasks[todo.id]\n//         if (todo.filter === 'active') {\n//             tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n//         }\n//         if (todo.filter === 'complited') {\n//             tasksForRender = tasks[todo.id].filter(f => f.isDone)\n//         }\n//         return <Todolist key={todo.id}\n//                          todolistID={todo.id}\n//                          title={todo.title}\n//                          tasks={tasksForRender}\n//                          filter={todo.filter}\n//         />\n//     })}\n//     </>\n// }","import React, {useCallback} from 'react';\nimport './App.css';\nimport {v1} from \"uuid\";\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\nimport {AddForm} from \"./Components/AddForm/AddForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {Home} from '@mui/icons-material';\nimport styled from \"styled-components\";\nimport img from './Components/Images/wallpaperflare.com_wallpaper.jpg'\nimport {\n    addNewTodoAC\n} from \"./Components/State/TasksReducer\";\nimport {\n    AddTodoAC\n} from \"./Components/State/TodolistReducer\";\nimport {useDispatch} from \"react-redux\";\n\nfunction App() {\n    console.log('App render')\n    const dispatch = useDispatch()\n\n    const addTodolist = useCallback((title: string) => {\n        const newTodolistId = v1()\n        dispatch(AddTodoAC(title, newTodolistId))\n        dispatch(addNewTodoAC(newTodolistId))\n    }, [dispatch])\n\n    return <AppCase>\n        <AppBar position=\"static\" style={{opacity: '0.7'}}>\n            <Toolbar>\n                <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    sx={{mr: 2}}\n                >\n                    <Home fontSize=\"large\"/>\n                </IconButton>\n                <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                    Space Todolist\n                </Typography>\n                <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n        </AppBar>\n        <Container fixed style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n            <Grid container style={{\n                padding: '10px',\n                backgroundColor: 'rgba(203, 209, 213,0.7)',\n                margin: '10px',\n                borderRadius: '10px',\n                display: 'flex',\n                justifyContent: 'flex-end'\n            }}>\n                <AddForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={1} style={{display: 'flex', justifyContent: 'center'}}>\n                <TodolistsMap/>\n            </Grid>\n        </Container>\n    </AppCase>\n}\n\nexport default App;\n\n\nconst AppCase = styled.div`\n  background: url(${img}) no-repeat center/cover;\n  height: 100vh;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {todolistReducer} from \"./TodolistReducer\";\nimport {tasksReducer} from \"./TasksReducer\";\n\nexport type rootReducerType = ReturnType<typeof rootReducer>\nconst rootReducer = combineReducers({\n    todolists: todolistReducer,\n    tasks: tasksReducer\n})\n\nexport const store = createStore(rootReducer)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Components/State/store\";\n\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wallpaperflare.com_wallpaper.5940d32b.jpg\";"],"sourceRoot":""}