{"version":3,"sources":["Components/Map/TasksMap.tsx","Components/Todolist/Todolist.tsx","Components/Map/TodolistsMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TasksMap","tasks","changeCheckbox","removeTaskX","map","m","key","id","className","isDone","type","checked","onChange","e","title","onClick","Todolist","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","todolistID","filter","props","useState","setTitle","error","setError","addTaskButton","trim","changeTasksFiler","value","currentTarget","onKeyPress","TodolistsMap","todolists","todo","tasksForRender","f","App","todolist1","v1","todolist2","todolist3","setTasks","setTodolists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b7c83538.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\nimport {TaskType} from \"../Todolist/Todolist\";\n\ntype TasksMapType = {\n    tasks: Array<TaskType>\n    changeCheckbox: (id: string, e: ChangeEvent<HTMLInputElement>) => void\n    removeTaskX: (id: string) => void\n    id: string\n}\nexport const TasksMap = ({tasks, changeCheckbox, removeTaskX, ...props}: TasksMapType) => {\n    return (\n        <ul>{\n            tasks.map(m => {\n                    return <li key={m.id} className={m.isDone ? 'is-done' : ''}>\n                        <input type=\"checkbox\" checked={m.isDone}\n                               onChange={(e) => changeCheckbox(m.id, e)}/>\n                        <span>{m.title}</span>\n                        <button onClick={(e) => removeTaskX(m.id)}>x</button>\n                    </li>\n                }\n            )\n        }\n        </ul>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TasksMap} from \"../Map/TasksMap\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValueType = 'all' | 'active' | 'complited'\r\nexport type TodolitsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValueType\r\n    todolistID: string\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             removeTodolist,\r\n                             todolistID,\r\n                             filter,\r\n                             ...props\r\n                         }: PropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const addTaskButton = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(title.trim(), todolistID)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is undefined !')\r\n        }\r\n    }\r\n    const changeTasksFiler = (value: FilterValueType, todolistID: string) => changeFilter(value, todolistID)\r\n    const removeTaskX = (id: string) => removeTask(id, todolistID)\r\n    const onKeyPressAdd = (e: React.KeyboardEvent<HTMLInputElement>) => (e.key === 'Enter') ? addTaskButton() : ''\r\n    const changeCheckbox = (id: string, e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(id, e.currentTarget.checked, todolistID)\r\n    const removeTodolistX = () => removeTodolist(todolistID)\r\n\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={removeTodolistX}>x</button>\r\n        </h3>\r\n        <div>\r\n            <input className={error ? 'error' : ''}\r\n                   value={title}\r\n                   onChange={onChangeInput}\r\n                   onKeyPress={onKeyPressAdd}/>\r\n            <button onClick={addTaskButton}>+</button>\r\n        </div>\r\n        {error ? <div className={'error-message'}>{error}</div> : ''}\r\n\r\n\r\n        <TasksMap tasks={props.tasks}\r\n                  changeCheckbox={changeCheckbox}\r\n                  removeTaskX={removeTaskX}\r\n                  id={todolistID}/>\r\n\r\n\r\n        <div>\r\n            <button className={filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('all', todolistID)}>All\r\n            </button>\r\n            <button className={filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('active', todolistID)}>Active\r\n            </button>\r\n            <button className={filter === 'complited' ? 'active-filter' : ''}\r\n                    onClick={() => changeTasksFiler('complited', todolistID)}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import {FilterValueType, TaskStateType, Todolist, TodolitsType} from \"../Todolist/Todolist\";\nimport React from \"react\";\n\n\ntype TodolistsMapType = {\n    todolists: Array<TodolitsType>\n    tasks: TaskStateType\n    removeTask: (id: string, todolistID: string) => void\n    changeFilter: (filter: FilterValueType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistID: string) => void\n    removeTodolist: (todolistID: string) => void\n}\nexport const TodolistsMap = ({\n                                 todolists,\n                                 tasks,\n                                 removeTask,\n                                 changeFilter,\n                                 addTask,\n                                 changeTaskStatus,\n                                 removeTodolist,\n                                 ...props\n                             }: TodolistsMapType) => {\n    return (\n        <div className=\"App\">\n            {todolists.map(todo => {\n                let tasksForRender = tasks[todo.id]\n                if (todo.filter === 'active') {\n                    tasksForRender = tasks[todo.id].filter(f => !f.isDone)\n                }\n                if (todo.filter === 'complited') {\n                    tasksForRender = tasks[todo.id].filter(f => f.isDone)\n                }\n                return <Todolist key={todo.id}\n                                 todolistID={todo.id}\n                                 title={todo.title}\n                                 tasks={tasksForRender}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeTaskStatus={changeTaskStatus}\n                                 filter={todo.filter}\n                                 removeTodolist={removeTodolist}/>\n            })}\n        </div>\n    );\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType, TaskStateType, TodolitsType} from './Components/Todolist/Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {TodolistsMap} from \"./Components/Map/TodolistsMap\";\r\n\r\nfunction App() {\r\n    const todolist1 = v1()\r\n    const todolist2 = v1()\r\n    const todolist3 = v1()\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todolist1]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false}],\r\n            [todolist2]: [{id: v1(), title: \"Book\", isDone: false},\r\n                {id: v1(), title: \"Milk\", isDone: false},\r\n                {id: v1(), title: \"Bread\", isDone: false}],\r\n            [todolist3]: [{id: v1(), title: \"Helmet\", isDone: true},\r\n                {id: v1(), title: \"Wheels\", isDone: false},\r\n                {id: v1(), title: \"Crank\", isDone: false}]\r\n        }\r\n    )\r\n    const [todolists, setTodolists] = useState<Array<TodolitsType>>([\r\n        {id: todolist1, title: 'What to learn?', filter: 'all'},\r\n        {id: todolist2, title: 'What to buy?', filter: 'all'},\r\n        {id: todolist3, title: 'What to fixie?', filter: 'all'}\r\n    ])\r\n\r\n    const removeTask = (id: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: tasks[todolistID].filter(f => f.id !== id)\r\n    })\r\n\r\n    const changeFilter = (filter: FilterValueType, todolistID: string) => setTodolists(todolists.map(m => m.id === todolistID ? {\r\n        ...m,\r\n        filter: filter\r\n    } : m))\r\n\r\n    const addTask = (title: string, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]\r\n    })\r\n\r\n    const changeTaskStatus = (id: string, isDone: boolean, todolistID: string) => setTasks({\r\n        ...tasks,\r\n        [todolistID]: tasks[todolistID].map(m => m.id === id ? {...m, isDone} : m)\r\n    })\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(f => f.id !== todolistID))\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return <TodolistsMap todolists={todolists}\r\n                         tasks={tasks}\r\n                         removeTask={removeTask}\r\n                         changeFilter={changeFilter}\r\n                         addTask={addTask}\r\n                         changeTaskStatus={changeTaskStatus}\r\n                         removeTodolist={removeTodolist}/>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}